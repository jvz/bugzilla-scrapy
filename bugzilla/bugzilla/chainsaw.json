[
{"bug_id": "40068", "summary": "Add support for attach-on-demand API to chainsaw", "reporter": "Curt Cox", "version": "unspecified"},
{"comment_id": "91399", "bug_id": "40068", "who": "Curt Cox", "text": "From a user interface perspective, the easiest way to attach to a JVM would be\nto support the new attach-on-demand API in Mustang like JConsole does.  ZeroConf\nis great if the target application was written and deployed to support it, but\nthat is often not the case.\n\nAttach on demand\nhttp://blogs.sun.com/roller/page/alanb?entry=another_piece_of_the_tool\n\nThe UI it enables for JConsole\nhttp://blogs.sun.com/roller/page/alanb?entry=getting_started_with_jconsole_just"},
{"comment_id": "91399", "bug_id": "40068", "who": "Curt Cox", "text": "From a user interface perspective, the easiest way to attach to a JVM would be\nto support the new attach-on-demand API in Mustang like JConsole does.  ZeroConf\nis great if the target application was written and deployed to support it, but\nthat is often not the case.\n\nAttach on demand\nhttp://blogs.sun.com/roller/page/alanb?entry=another_piece_of_the_tool\n\nThe UI it enables for JConsole\nhttp://blogs.sun.com/roller/page/alanb?entry=getting_started_with_jconsole_just"},
{"comment_id": "91399", "bug_id": "40068", "who": "Curt Cox", "text": "From a user interface perspective, the easiest way to attach to a JVM would be\nto support the new attach-on-demand API in Mustang like JConsole does.  ZeroConf\nis great if the target application was written and deployed to support it, but\nthat is often not the case.\n\nAttach on demand\nhttp://blogs.sun.com/roller/page/alanb?entry=another_piece_of_the_tool\n\nThe UI it enables for JConsole\nhttp://blogs.sun.com/roller/page/alanb?entry=getting_started_with_jconsole_just"},
{"comment_id": "91399", "bug_id": "40068", "who": "Curt Cox", "text": "From a user interface perspective, the easiest way to attach to a JVM would be\nto support the new attach-on-demand API in Mustang like JConsole does.  ZeroConf\nis great if the target application was written and deployed to support it, but\nthat is often not the case.\n\nAttach on demand\nhttp://blogs.sun.com/roller/page/alanb?entry=another_piece_of_the_tool\n\nThe UI it enables for JConsole\nhttp://blogs.sun.com/roller/page/alanb?entry=getting_started_with_jconsole_just"},
{"comment_id": "91399", "bug_id": "40068", "who": "Curt Cox", "text": "From a user interface perspective, the easiest way to attach to a JVM would be\nto support the new attach-on-demand API in Mustang like JConsole does.  ZeroConf\nis great if the target application was written and deployed to support it, but\nthat is often not the case.\n\nAttach on demand\nhttp://blogs.sun.com/roller/page/alanb?entry=another_piece_of_the_tool\n\nThe UI it enables for JConsole\nhttp://blogs.sun.com/roller/page/alanb?entry=getting_started_with_jconsole_just"},
{"comment_id": "91399", "bug_id": "40068", "who": "Curt Cox", "text": "From a user interface perspective, the easiest way to attach to a JVM would be\nto support the new attach-on-demand API in Mustang like JConsole does.  ZeroConf\nis great if the target application was written and deployed to support it, but\nthat is often not the case.\n\nAttach on demand\nhttp://blogs.sun.com/roller/page/alanb?entry=another_piece_of_the_tool\n\nThe UI it enables for JConsole\nhttp://blogs.sun.com/roller/page/alanb?entry=getting_started_with_jconsole_just"},
{"bug_id": "40472", "summary": "SettingsManager calls loadSettings with global settings for Profilables", "reporter": "Robert Fischer", "version": "unspecified"},
{"comment_id": "93358", "bug_id": "40472", "who": "Robert Fischer", "text": "The chainsaw SettingsManager calls loadSettings(LoadSettingsEvent event) for \nclasses implementing the Profilable interfaces from the loadGlobalSettings() \nmethod.\nFor these classes this isn't very useful, since at this time the \nLoadSettingsEvent doesn't contain profilable properties (they are loaded \nafterwards, in loadProfilableSettings().\n\nEffectively, for classes implementing Profilable the \nloadSettings(LoadSettingsEvent event) method gets called twice:\n- one time with global settings (which don't contain the needed properties, \nsince Profilables need settings from the respective ~/.chainsaw/\n<profilable>.properties file)\n- a second time with global settings merged with properties gathered from the \nspecific property-file in the ~/.chainsaw directory, now containing the needed \nproperties\n\nIMHO for Profilables the loadSettings(LoadSettingsEvent event) should be called \nonly in the second call (where both global and specific properties are merged)"},
{"bug_id": "40533", "summary": "Chainsaw not showing all logging statements", "reporter": "Wim Deblauwe", "version": "unspecified"},
{"comment_id": "93724", "bug_id": "40533", "who": "Wim Deblauwe", "text": "I use the log4j xml layout to log the application's messages. I then\ndrag-and-drop that XML file to chainsaw to view them. I have noticed that\nsometimes Chainsaw will not show all message. I have attached a zip file\ncontaining the xml file that gives the failure, along with a screenshot of my\nchainsaw. I am using Chainsaw 1.99.99."},
{"comment_id": "93724", "bug_id": "40533", "who": "Wim Deblauwe", "text": "I use the log4j xml layout to log the application's messages. I then\ndrag-and-drop that XML file to chainsaw to view them. I have noticed that\nsometimes Chainsaw will not show all message. I have attached a zip file\ncontaining the xml file that gives the failure, along with a screenshot of my\nchainsaw. I am using Chainsaw 1.99.99."},
{"comment_id": "93724", "bug_id": "40533", "who": "Wim Deblauwe", "text": "I use the log4j xml layout to log the application's messages. I then\ndrag-and-drop that XML file to chainsaw to view them. I have noticed that\nsometimes Chainsaw will not show all message. I have attached a zip file\ncontaining the xml file that gives the failure, along with a screenshot of my\nchainsaw. I am using Chainsaw 1.99.99."},
{"comment_id": "93724", "bug_id": "40533", "who": "Wim Deblauwe", "text": "I use the log4j xml layout to log the application's messages. I then\ndrag-and-drop that XML file to chainsaw to view them. I have noticed that\nsometimes Chainsaw will not show all message. I have attached a zip file\ncontaining the xml file that gives the failure, along with a screenshot of my\nchainsaw. I am using Chainsaw 1.99.99."},
{"bug_id": "47208", "summary": "Better Default colours for Log Panel Color Filter", "reporter": "RyanH", "version": "1.2"},
{"comment_id": "127079", "bug_id": "47208", "who": "RyanH", "text": "Better defaults could be included. Specifically, defaults for java.util.logging could be added.\n\nlevel==severe\nlevel==warning\nlevel==info\nlevel==config\nlevel==fine\nlevel==finer\nlevel==finest\n\nhttp://sourceforge.net/project/screenshots.php?group_id=209609"},
{"comment_id": "127079", "bug_id": "47208", "who": "RyanH", "text": "Better defaults could be included. Specifically, defaults for java.util.logging could be added.\n\nlevel==severe\nlevel==warning\nlevel==info\nlevel==config\nlevel==fine\nlevel==finer\nlevel==finest\n\nhttp://sourceforge.net/project/screenshots.php?group_id=209609"},
{"bug_id": "48607", "summary": "Log levels are not displayed corectly", "reporter": null, "version": "unspecified"},
{"comment_id": "133882", "bug_id": "48607", "who": "", "text": "Created attachment 24886\nConfig file for chainsaw and log file\n\nUsing java 6, log4j 1.2.15, CentOS.\nThe log level is not displayed correctly, it is always with debug.\nusing a minimal configuration for logFormat: TIMESTAMP and LEVEL and a file containing only \n\n2010-01-25 14:56:56,111 [DEBUG]\n2010-01-25 14:56:56,216 [INFO ]\n\nit can be reproduced.\n\nSee the full conifg file and the log file.\nMy guess is that it is limited to linux and with LogFilePatternReceiver.\n\nBut I don't have a workaround :("},
{"comment_id": "133882", "bug_id": "48607", "who": "", "text": "Created attachment 24886\nConfig file for chainsaw and log file\n\nUsing java 6, log4j 1.2.15, CentOS.\nThe log level is not displayed correctly, it is always with debug.\nusing a minimal configuration for logFormat: TIMESTAMP and LEVEL and a file containing only \n\n2010-01-25 14:56:56,111 [DEBUG]\n2010-01-25 14:56:56,216 [INFO ]\n\nit can be reproduced.\n\nSee the full conifg file and the log file.\nMy guess is that it is limited to linux and with LogFilePatternReceiver.\n\nBut I don't have a workaround :("},
{"bug_id": "49421", "summary": "Chainsaw don't show Logger for SocketReceiver and SocketHubReceiver", "reporter": "Benjamin Ruede", "version": "1.2"},
{"comment_id": "137537", "bug_id": "49421", "who": "Benjamin Ruede", "text": "I had build the newest version of Chainsaw from the SVN with maven. (revision: 953286)\n\nProblem now ist that the column for the Logger is empty if i get LoggingEvents from a SocketReceiver or SocketHubReceiver\n\nthe following exceptions are shown in the chainsaw log:\n\nLevel: ERROR\nLogger: org.apache.log4j.chainsaw.LogUI\nTime: 2010-06-10 13:48:22,364\nThread: AWT-EventQueue-0\nMessage: Uncaught exception in thread Thread[AWT-EventQueue-0,6,main]\nMarker:\nThrowable:java.lang.NullPointerException\n\tat java.util.StringTokenizer. (Unknown Source)\n\tat java.util.StringTokenizer. (Unknown Source)\n\tat org.apache.log4j.chainsaw.LogPanelLoggerTreeModel.tokenize(LogPanelLoggerTreeModel.java:161)\n\tat org.apache.log4j.chainsaw.LogPanelLoggerTreeModel.addLoggerNameInDispatchThread(LogPanelLoggerTreeModel.java:66)\n\tat org.apache.log4j.chainsaw.LogPanelLoggerTreeModel.access$100(LogPanelLoggerTreeModel.java:44)\n\tat org.apache.log4j.chainsaw.LogPanelLoggerTreeModel$1.run(LogPanelLoggerTreeModel.java:60)\n\tat java.awt.event.InvocationEvent.dispatch(Unknown Source)\n\tat java.awt.EventQueue.dispatchEvent(Unknown Source)\n\tat java.awt.EventDispatchThread.pumpOneEventForFilters(Unknown Source)\n\tat java.awt.EventDispatchThread.pumpEventsForFilter(Unknown Source)\n\tat java.awt.EventDispatchThread.pumpEventsForHierarchy(Unknown Source)\n\tat java.awt.EventDispatchThread.pumpEvents(Unknown Source)\n\tat java.awt.EventDispatchThread.pumpEvents(Unknown Source)\n\tat java.awt.EventDispatchThread.run(Unknown Source)   \n\nAnd if i klick on a event in the table the following Error is thrown:\n\nLevel: ERROR\nLogger: org.apache.log4j.chainsaw.LogUI\nTime: 2010-06-10 13:50:23,236\nThread: AWT-EventQueue-0\nMessage: Uncaught exception in thread Thread[AWT-EventQueue-0,6,main]\nMarker:\nThrowable: java.lang.NullPointerException\n\tat org.apache.log4j.CategoryKey. (CategoryKey.java:32)\n\tat org.apache.log4j.Hierarchy.getLogger(Hierarchy.java:266)\n\tat org.apache.log4j.Hierarchy.getLogger(Hierarchy.java:247)\n\tat org.apache.log4j.LoggerRepositoryExImpl.getLogger(LoggerRepositoryExImpl.java:383)\n\tat org.apache.log4j.LogManager.getLogger(LogManager.java:228)\n\tat org.apache.log4j.Logger.getLogger(Logger.java:104)\n\tat org.apache.log4j.chainsaw.layout.EventDetailLayout.copyForHTML(EventDetailLayout.java:181)\n\tat org.apache.log4j.chainsaw.layout.EventDetailLayout.format(EventDetailLayout.java:269)\n\tat org.apache.log4j.chainsaw.LogPanel$DetailPaneUpdater.updateDetailPane(LogPanel.java:3062)\n\tat org.apache.log4j.chainsaw.LogPanel$DetailPaneUpdater.setAndUpdateSelectedRow(LogPanel.java:3037)\n\tat org.apache.log4j.chainsaw.LogPanel$DetailPaneUpdater.access$3100(LogPanel.java:3019)\n\tat org.apache.log4j.chainsaw.LogPanel$44.tableChanged(LogPanel.java:1121)\n\tat javax.swing.table.AbstractTableModel.fireTableChanged(Unknown Source)\n\tat javax.swing.table.AbstractTableModel.fireTableRowsUpdated(Unknown Source)\n\tat org.apache.log4j.chainsaw.ChainsawCyclicBufferTableModel.fireRowUpdated(ChainsawCyclicBufferTableModel.java:669)\n\tat org.apache.log4j.chainsaw.LogPanel$MarkerCellEditor.stopCellEditing(LogPanel.java:3142)\n\tat javax.swing.plaf.basic.BasicTableUI$Handler.mousePressed(Unknown Source)\n\tat java.awt.AWTEventMulticaster.mousePressed(Unknown Source)\n\tat java.awt.AWTEventMulticaster.mousePressed(Unknown Source)\n\tat java.awt.Component.processMouseEvent(Unknown Source)\n\tat javax.swing.JComponent.processMouseEvent(Unknown Source)\n\tat java.awt.Component.processEvent(Unknown Source)\n\tat java.awt.Container.processEvent(Unknown Source)\n\tat java.awt.Component.dispatchEventImpl(Unknown Source)\n\tat java.awt.Container.dispatchEventImpl(Unknown Source)\n\tat java.awt.Component.dispatchEvent(Unknown Source)\n\tat java.awt.LightweightDispatcher.retargetMouseEvent(Unknown Source)\n\tat java.awt.LightweightDispatcher.processMouseEvent(Unknown Source)\n\tat java.awt.LightweightDispatcher.dispatchEvent(Unknown Source)\n\tat java.awt.Container.dispatchEventImpl(Unknown Source)\n\tat java.awt.Window.dispatchEventImpl(Unknown Source)\n\tat java.awt.Component.dispatchEvent(Unknown Source)\n\tat java.awt.EventQueue.dispatchEvent(Unknown Source)\n\tat java.awt.EventDispatchThread.pumpOneEventForFilters(Unknown Source)\n\tat java.awt.EventDispatchThread.pumpEventsForFilter(Unknown Source)\n\tat java.awt.EventDispatchThread.pumpEventsForHierarchy(Unknown Source)\n\tat java.awt.EventDispatchThread.pumpEvents(Unknown Source)\n\tat java.awt.EventDispatchThread.pumpEvents(Unknown Source)\n\tat java.awt.EventDispatchThread.run(Unknown Source)\n\n\nI spend some time and watched in the Source what is going wrong.\n\ni found the following problem\n\nAfter the LoggingEvent is deseriazabled the Field logger is null because this field is set transident and is not restored in the \"writeObject\" method.\n\nif now Chainsaw use this LoggingEvent to create a ExtendedLoggingEvent there is no Logger in this event.\n\nthe construktor of the ExtendedLoggingEvent calls the super-construktor of LoggingEvent with e.getFQNOfLoggerClass() for the LoggerName and e.getLogger() for the logger both returnvalues will be null.\n\nthe construktor of LoggingEvent will now call categoryName = logger.getName(); for set the LoggerName. -> all null\n\nSo i changed the construktor for the ExtendedLoggingEvent from\n\n public ExtendedLoggingEvent(LoggingEvent e) {\n\n        super(e.getFQNOfLoggerClass(), e.getLogger(), e.getTimeStamp(), e.getLevel(), e.getMessage(), e.getThreadName(), e.getThrowableInformation(), e.getNDC(), e.getLocationInformation(), e.getProperties());\n    }\n\nto:\n\n //copy constructor\n    public ExtendedLoggingEvent(LoggingEvent e) {\n\n        super(e.getLoggerName(), e.getLogger()!=null?e.getLogger(): Logger.getLogger(e.getLoggerName()), e.getTimeStamp(), e.getLevel(), e.getMessage(), e.getThreadName(), e.getThrowableInformation(), e.getNDC(), e.getLocationInformation(), e.getProperties());\n    }\n\nwith this change i see now all Loggers in the column and no errors are thrown anymore.\n\ni don't know if it is the best way to fix this problem but it may help you to fix it."},
{"comment_id": "137537", "bug_id": "49421", "who": "Benjamin Ruede", "text": "I had build the newest version of Chainsaw from the SVN with maven. (revision: 953286)\n\nProblem now ist that the column for the Logger is empty if i get LoggingEvents from a SocketReceiver or SocketHubReceiver\n\nthe following exceptions are shown in the chainsaw log:\n\nLevel: ERROR\nLogger: org.apache.log4j.chainsaw.LogUI\nTime: 2010-06-10 13:48:22,364\nThread: AWT-EventQueue-0\nMessage: Uncaught exception in thread Thread[AWT-EventQueue-0,6,main]\nMarker:\nThrowable:java.lang.NullPointerException\n\tat java.util.StringTokenizer. (Unknown Source)\n\tat java.util.StringTokenizer. (Unknown Source)\n\tat org.apache.log4j.chainsaw.LogPanelLoggerTreeModel.tokenize(LogPanelLoggerTreeModel.java:161)\n\tat org.apache.log4j.chainsaw.LogPanelLoggerTreeModel.addLoggerNameInDispatchThread(LogPanelLoggerTreeModel.java:66)\n\tat org.apache.log4j.chainsaw.LogPanelLoggerTreeModel.access$100(LogPanelLoggerTreeModel.java:44)\n\tat org.apache.log4j.chainsaw.LogPanelLoggerTreeModel$1.run(LogPanelLoggerTreeModel.java:60)\n\tat java.awt.event.InvocationEvent.dispatch(Unknown Source)\n\tat java.awt.EventQueue.dispatchEvent(Unknown Source)\n\tat java.awt.EventDispatchThread.pumpOneEventForFilters(Unknown Source)\n\tat java.awt.EventDispatchThread.pumpEventsForFilter(Unknown Source)\n\tat java.awt.EventDispatchThread.pumpEventsForHierarchy(Unknown Source)\n\tat java.awt.EventDispatchThread.pumpEvents(Unknown Source)\n\tat java.awt.EventDispatchThread.pumpEvents(Unknown Source)\n\tat java.awt.EventDispatchThread.run(Unknown Source)   \n\nAnd if i klick on a event in the table the following Error is thrown:\n\nLevel: ERROR\nLogger: org.apache.log4j.chainsaw.LogUI\nTime: 2010-06-10 13:50:23,236\nThread: AWT-EventQueue-0\nMessage: Uncaught exception in thread Thread[AWT-EventQueue-0,6,main]\nMarker:\nThrowable: java.lang.NullPointerException\n\tat org.apache.log4j.CategoryKey. (CategoryKey.java:32)\n\tat org.apache.log4j.Hierarchy.getLogger(Hierarchy.java:266)\n\tat org.apache.log4j.Hierarchy.getLogger(Hierarchy.java:247)\n\tat org.apache.log4j.LoggerRepositoryExImpl.getLogger(LoggerRepositoryExImpl.java:383)\n\tat org.apache.log4j.LogManager.getLogger(LogManager.java:228)\n\tat org.apache.log4j.Logger.getLogger(Logger.java:104)\n\tat org.apache.log4j.chainsaw.layout.EventDetailLayout.copyForHTML(EventDetailLayout.java:181)\n\tat org.apache.log4j.chainsaw.layout.EventDetailLayout.format(EventDetailLayout.java:269)\n\tat org.apache.log4j.chainsaw.LogPanel$DetailPaneUpdater.updateDetailPane(LogPanel.java:3062)\n\tat org.apache.log4j.chainsaw.LogPanel$DetailPaneUpdater.setAndUpdateSelectedRow(LogPanel.java:3037)\n\tat org.apache.log4j.chainsaw.LogPanel$DetailPaneUpdater.access$3100(LogPanel.java:3019)\n\tat org.apache.log4j.chainsaw.LogPanel$44.tableChanged(LogPanel.java:1121)\n\tat javax.swing.table.AbstractTableModel.fireTableChanged(Unknown Source)\n\tat javax.swing.table.AbstractTableModel.fireTableRowsUpdated(Unknown Source)\n\tat org.apache.log4j.chainsaw.ChainsawCyclicBufferTableModel.fireRowUpdated(ChainsawCyclicBufferTableModel.java:669)\n\tat org.apache.log4j.chainsaw.LogPanel$MarkerCellEditor.stopCellEditing(LogPanel.java:3142)\n\tat javax.swing.plaf.basic.BasicTableUI$Handler.mousePressed(Unknown Source)\n\tat java.awt.AWTEventMulticaster.mousePressed(Unknown Source)\n\tat java.awt.AWTEventMulticaster.mousePressed(Unknown Source)\n\tat java.awt.Component.processMouseEvent(Unknown Source)\n\tat javax.swing.JComponent.processMouseEvent(Unknown Source)\n\tat java.awt.Component.processEvent(Unknown Source)\n\tat java.awt.Container.processEvent(Unknown Source)\n\tat java.awt.Component.dispatchEventImpl(Unknown Source)\n\tat java.awt.Container.dispatchEventImpl(Unknown Source)\n\tat java.awt.Component.dispatchEvent(Unknown Source)\n\tat java.awt.LightweightDispatcher.retargetMouseEvent(Unknown Source)\n\tat java.awt.LightweightDispatcher.processMouseEvent(Unknown Source)\n\tat java.awt.LightweightDispatcher.dispatchEvent(Unknown Source)\n\tat java.awt.Container.dispatchEventImpl(Unknown Source)\n\tat java.awt.Window.dispatchEventImpl(Unknown Source)\n\tat java.awt.Component.dispatchEvent(Unknown Source)\n\tat java.awt.EventQueue.dispatchEvent(Unknown Source)\n\tat java.awt.EventDispatchThread.pumpOneEventForFilters(Unknown Source)\n\tat java.awt.EventDispatchThread.pumpEventsForFilter(Unknown Source)\n\tat java.awt.EventDispatchThread.pumpEventsForHierarchy(Unknown Source)\n\tat java.awt.EventDispatchThread.pumpEvents(Unknown Source)\n\tat java.awt.EventDispatchThread.pumpEvents(Unknown Source)\n\tat java.awt.EventDispatchThread.run(Unknown Source)\n\n\nI spend some time and watched in the Source what is going wrong.\n\ni found the following problem\n\nAfter the LoggingEvent is deseriazabled the Field logger is null because this field is set transident and is not restored in the \"writeObject\" method.\n\nif now Chainsaw use this LoggingEvent to create a ExtendedLoggingEvent there is no Logger in this event.\n\nthe construktor of the ExtendedLoggingEvent calls the super-construktor of LoggingEvent with e.getFQNOfLoggerClass() for the LoggerName and e.getLogger() for the logger both returnvalues will be null.\n\nthe construktor of LoggingEvent will now call categoryName = logger.getName(); for set the LoggerName. -> all null\n\nSo i changed the construktor for the ExtendedLoggingEvent from\n\n public ExtendedLoggingEvent(LoggingEvent e) {\n\n        super(e.getFQNOfLoggerClass(), e.getLogger(), e.getTimeStamp(), e.getLevel(), e.getMessage(), e.getThreadName(), e.getThrowableInformation(), e.getNDC(), e.getLocationInformation(), e.getProperties());\n    }\n\nto:\n\n //copy constructor\n    public ExtendedLoggingEvent(LoggingEvent e) {\n\n        super(e.getLoggerName(), e.getLogger()!=null?e.getLogger(): Logger.getLogger(e.getLoggerName()), e.getTimeStamp(), e.getLevel(), e.getMessage(), e.getThreadName(), e.getThrowableInformation(), e.getNDC(), e.getLocationInformation(), e.getProperties());\n    }\n\nwith this change i see now all Loggers in the column and no errors are thrown anymore.\n\ni don't know if it is the best way to fix this problem but it may help you to fix it."},
{"comment_id": "137537", "bug_id": "49421", "who": "Benjamin Ruede", "text": "I had build the newest version of Chainsaw from the SVN with maven. (revision: 953286)\n\nProblem now ist that the column for the Logger is empty if i get LoggingEvents from a SocketReceiver or SocketHubReceiver\n\nthe following exceptions are shown in the chainsaw log:\n\nLevel: ERROR\nLogger: org.apache.log4j.chainsaw.LogUI\nTime: 2010-06-10 13:48:22,364\nThread: AWT-EventQueue-0\nMessage: Uncaught exception in thread Thread[AWT-EventQueue-0,6,main]\nMarker:\nThrowable:java.lang.NullPointerException\n\tat java.util.StringTokenizer. (Unknown Source)\n\tat java.util.StringTokenizer. (Unknown Source)\n\tat org.apache.log4j.chainsaw.LogPanelLoggerTreeModel.tokenize(LogPanelLoggerTreeModel.java:161)\n\tat org.apache.log4j.chainsaw.LogPanelLoggerTreeModel.addLoggerNameInDispatchThread(LogPanelLoggerTreeModel.java:66)\n\tat org.apache.log4j.chainsaw.LogPanelLoggerTreeModel.access$100(LogPanelLoggerTreeModel.java:44)\n\tat org.apache.log4j.chainsaw.LogPanelLoggerTreeModel$1.run(LogPanelLoggerTreeModel.java:60)\n\tat java.awt.event.InvocationEvent.dispatch(Unknown Source)\n\tat java.awt.EventQueue.dispatchEvent(Unknown Source)\n\tat java.awt.EventDispatchThread.pumpOneEventForFilters(Unknown Source)\n\tat java.awt.EventDispatchThread.pumpEventsForFilter(Unknown Source)\n\tat java.awt.EventDispatchThread.pumpEventsForHierarchy(Unknown Source)\n\tat java.awt.EventDispatchThread.pumpEvents(Unknown Source)\n\tat java.awt.EventDispatchThread.pumpEvents(Unknown Source)\n\tat java.awt.EventDispatchThread.run(Unknown Source)   \n\nAnd if i klick on a event in the table the following Error is thrown:\n\nLevel: ERROR\nLogger: org.apache.log4j.chainsaw.LogUI\nTime: 2010-06-10 13:50:23,236\nThread: AWT-EventQueue-0\nMessage: Uncaught exception in thread Thread[AWT-EventQueue-0,6,main]\nMarker:\nThrowable: java.lang.NullPointerException\n\tat org.apache.log4j.CategoryKey. (CategoryKey.java:32)\n\tat org.apache.log4j.Hierarchy.getLogger(Hierarchy.java:266)\n\tat org.apache.log4j.Hierarchy.getLogger(Hierarchy.java:247)\n\tat org.apache.log4j.LoggerRepositoryExImpl.getLogger(LoggerRepositoryExImpl.java:383)\n\tat org.apache.log4j.LogManager.getLogger(LogManager.java:228)\n\tat org.apache.log4j.Logger.getLogger(Logger.java:104)\n\tat org.apache.log4j.chainsaw.layout.EventDetailLayout.copyForHTML(EventDetailLayout.java:181)\n\tat org.apache.log4j.chainsaw.layout.EventDetailLayout.format(EventDetailLayout.java:269)\n\tat org.apache.log4j.chainsaw.LogPanel$DetailPaneUpdater.updateDetailPane(LogPanel.java:3062)\n\tat org.apache.log4j.chainsaw.LogPanel$DetailPaneUpdater.setAndUpdateSelectedRow(LogPanel.java:3037)\n\tat org.apache.log4j.chainsaw.LogPanel$DetailPaneUpdater.access$3100(LogPanel.java:3019)\n\tat org.apache.log4j.chainsaw.LogPanel$44.tableChanged(LogPanel.java:1121)\n\tat javax.swing.table.AbstractTableModel.fireTableChanged(Unknown Source)\n\tat javax.swing.table.AbstractTableModel.fireTableRowsUpdated(Unknown Source)\n\tat org.apache.log4j.chainsaw.ChainsawCyclicBufferTableModel.fireRowUpdated(ChainsawCyclicBufferTableModel.java:669)\n\tat org.apache.log4j.chainsaw.LogPanel$MarkerCellEditor.stopCellEditing(LogPanel.java:3142)\n\tat javax.swing.plaf.basic.BasicTableUI$Handler.mousePressed(Unknown Source)\n\tat java.awt.AWTEventMulticaster.mousePressed(Unknown Source)\n\tat java.awt.AWTEventMulticaster.mousePressed(Unknown Source)\n\tat java.awt.Component.processMouseEvent(Unknown Source)\n\tat javax.swing.JComponent.processMouseEvent(Unknown Source)\n\tat java.awt.Component.processEvent(Unknown Source)\n\tat java.awt.Container.processEvent(Unknown Source)\n\tat java.awt.Component.dispatchEventImpl(Unknown Source)\n\tat java.awt.Container.dispatchEventImpl(Unknown Source)\n\tat java.awt.Component.dispatchEvent(Unknown Source)\n\tat java.awt.LightweightDispatcher.retargetMouseEvent(Unknown Source)\n\tat java.awt.LightweightDispatcher.processMouseEvent(Unknown Source)\n\tat java.awt.LightweightDispatcher.dispatchEvent(Unknown Source)\n\tat java.awt.Container.dispatchEventImpl(Unknown Source)\n\tat java.awt.Window.dispatchEventImpl(Unknown Source)\n\tat java.awt.Component.dispatchEvent(Unknown Source)\n\tat java.awt.EventQueue.dispatchEvent(Unknown Source)\n\tat java.awt.EventDispatchThread.pumpOneEventForFilters(Unknown Source)\n\tat java.awt.EventDispatchThread.pumpEventsForFilter(Unknown Source)\n\tat java.awt.EventDispatchThread.pumpEventsForHierarchy(Unknown Source)\n\tat java.awt.EventDispatchThread.pumpEvents(Unknown Source)\n\tat java.awt.EventDispatchThread.pumpEvents(Unknown Source)\n\tat java.awt.EventDispatchThread.run(Unknown Source)\n\n\nI spend some time and watched in the Source what is going wrong.\n\ni found the following problem\n\nAfter the LoggingEvent is deseriazabled the Field logger is null because this field is set transident and is not restored in the \"writeObject\" method.\n\nif now Chainsaw use this LoggingEvent to create a ExtendedLoggingEvent there is no Logger in this event.\n\nthe construktor of the ExtendedLoggingEvent calls the super-construktor of LoggingEvent with e.getFQNOfLoggerClass() for the LoggerName and e.getLogger() for the logger both returnvalues will be null.\n\nthe construktor of LoggingEvent will now call categoryName = logger.getName(); for set the LoggerName. -> all null\n\nSo i changed the construktor for the ExtendedLoggingEvent from\n\n public ExtendedLoggingEvent(LoggingEvent e) {\n\n        super(e.getFQNOfLoggerClass(), e.getLogger(), e.getTimeStamp(), e.getLevel(), e.getMessage(), e.getThreadName(), e.getThrowableInformation(), e.getNDC(), e.getLocationInformation(), e.getProperties());\n    }\n\nto:\n\n //copy constructor\n    public ExtendedLoggingEvent(LoggingEvent e) {\n\n        super(e.getLoggerName(), e.getLogger()!=null?e.getLogger(): Logger.getLogger(e.getLoggerName()), e.getTimeStamp(), e.getLevel(), e.getMessage(), e.getThreadName(), e.getThrowableInformation(), e.getNDC(), e.getLocationInformation(), e.getProperties());\n    }\n\nwith this change i see now all Loggers in the column and no errors are thrown anymore.\n\ni don't know if it is the best way to fix this problem but it may help you to fix it."},
{"bug_id": "49489", "summary": "Ability to filter on several loggers", "reporter": null, "version": "unspecified"},
{"comment_id": "137816", "bug_id": "49489", "who": "", "text": "We can not filter on several logger from the logger tree.\n\nIt would be nice to have this feature"},
{"comment_id": "137816", "bug_id": "49489", "who": "", "text": "We can not filter on several logger from the logger tree.\n\nIt would be nice to have this feature"},
{"comment_id": "137816", "bug_id": "49489", "who": "", "text": "We can not filter on several logger from the logger tree.\n\nIt would be nice to have this feature"},
{"bug_id": "50433", "summary": "Drag and Drop does not work anymore", "reporter": "Jazz", "version": "unspecified"},
{"comment_id": "142488", "bug_id": "50433", "who": "Jazz", "text": "Since revision SVN 1035160, Drag and Drop does not work anymore.\nAt the previous revision (SVN 1034942), it works.\nReverting the change to FileDnDTarget fixes the problem."},
{"bug_id": "50445", "summary": "Color bar is higher than scrollabr", "reporter": "Jazz", "version": "unspecified"},
{"comment_id": "142533", "bug_id": "50445", "who": "Jazz", "text": "Created attachment 26385\nScreenshot before SVN 1023184\n\nSince revision SVN 1023184, the color bar on the right is higher than the scrollbar, so that the thumb does not match the visible colored items."},
{"comment_id": "142533", "bug_id": "50445", "who": "Jazz", "text": "Created attachment 26385\nScreenshot before SVN 1023184\n\nSince revision SVN 1023184, the color bar on the right is higher than the scrollbar, so that the thumb does not match the visible colored items."},
{"bug_id": "51227", "summary": "after deleting logs using trash button no more logs printed to console", "reporter": "Amit Gupta", "version": "unspecified"},
{"comment_id": "146442", "bug_id": "51227", "who": "Amit Gupta", "text": "when I remove all the logs from current view, I dont see any more logs coming to the console, even though the logs file is getting the new logs messages constantly\nThis issue is seen quite frequently.\n\nI am running Chainsaw in Mac 10.6 which hosts VirtualBox 4.0.4( port forwarding) with Centos 5.4 image in which my JBOSS is running and generating logs in server.log file\nChainsaw is getting these logs through Socket Appender\n\nMAC Host's /etc/hosts file contains lots of aliases for localhost/127.0.0.1 entries\n\nTo resume receiving the logs I have to restart Virtual Box every time this happens."},
{"bug_id": "51538", "summary": "Chainsaw 2 - add password to JMSReceiverBeanInfo in apache-log4j-receivers so that the GUI can be configured to connect to JMS", "reporter": "Dave Boden", "version": "unspecified"},
{"comment_id": "148053", "bug_id": "51538", "who": "Dave Boden", "text": "Created attachment 27304\nPatch file\n\nI've got Chainsaw v2 working connecting to Tibco EMS (JMS) and receiving log updates. To do so, I needed to enter a password to connect to the Tibco EMS server.\n\nJMSReceiverBeanInfo currently doesn't let you specify a password, so you don't get the password entry box on the GUI. A small change gets things working.\n\n(I've also moved the pom.xml file over from 1.1-SNAPSHOT to 1.1 of the apache-log4j-component artifact now that 1.1 has been built and seems to have everything required. I only tend to point at snapshots when required, preferring to point at release versions when there's nothing new in the snapshot that's needed or desirable."},
{"comment_id": "148053", "bug_id": "51538", "who": "Dave Boden", "text": "Created attachment 27304\nPatch file\n\nI've got Chainsaw v2 working connecting to Tibco EMS (JMS) and receiving log updates. To do so, I needed to enter a password to connect to the Tibco EMS server.\n\nJMSReceiverBeanInfo currently doesn't let you specify a password, so you don't get the password entry box on the GUI. A small change gets things working.\n\n(I've also moved the pom.xml file over from 1.1-SNAPSHOT to 1.1 of the apache-log4j-component artifact now that 1.1 has been built and seems to have everything required. I only tend to point at snapshots when required, preferring to point at release versions when there's nothing new in the snapshot that's needed or desirable."},
{"comment_id": "148053", "bug_id": "51538", "who": "Dave Boden", "text": "Created attachment 27304\nPatch file\n\nI've got Chainsaw v2 working connecting to Tibco EMS (JMS) and receiving log updates. To do so, I needed to enter a password to connect to the Tibco EMS server.\n\nJMSReceiverBeanInfo currently doesn't let you specify a password, so you don't get the password entry box on the GUI. A small change gets things working.\n\n(I've also moved the pom.xml file over from 1.1-SNAPSHOT to 1.1 of the apache-log4j-component artifact now that 1.1 has been built and seems to have everything required. I only tend to point at snapshots when required, preferring to point at release versions when there's nothing new in the snapshot that's needed or desirable."},
{"comment_id": "148053", "bug_id": "51538", "who": "Dave Boden", "text": "Created attachment 27304\nPatch file\n\nI've got Chainsaw v2 working connecting to Tibco EMS (JMS) and receiving log updates. To do so, I needed to enter a password to connect to the Tibco EMS server.\n\nJMSReceiverBeanInfo currently doesn't let you specify a password, so you don't get the password entry box on the GUI. A small change gets things working.\n\n(I've also moved the pom.xml file over from 1.1-SNAPSHOT to 1.1 of the apache-log4j-component artifact now that 1.1 has been built and seems to have everything required. I only tend to point at snapshots when required, preferring to point at release versions when there's nothing new in the snapshot that's needed or desirable."},
{"comment_id": "148053", "bug_id": "51538", "who": "Dave Boden", "text": "Created attachment 27304\nPatch file\n\nI've got Chainsaw v2 working connecting to Tibco EMS (JMS) and receiving log updates. To do so, I needed to enter a password to connect to the Tibco EMS server.\n\nJMSReceiverBeanInfo currently doesn't let you specify a password, so you don't get the password entry box on the GUI. A small change gets things working.\n\n(I've also moved the pom.xml file over from 1.1-SNAPSHOT to 1.1 of the apache-log4j-component artifact now that 1.1 has been built and seems to have everything required. I only tend to point at snapshots when required, preferring to point at release versions when there's nothing new in the snapshot that's needed or desirable."},
{"bug_id": "52765", "summary": "ZeroConf does not work", "reporter": "Charles Strahan", "version": "unspecified"},
{"comment_id": "154132", "bug_id": "52765", "who": "Charles Strahan", "text": "There are a couple aspects of this problem for me to address, so here we go. This report is based on the latest trunk of Chainsaw as of earlier today (should be revision 1178454), on Ubuntu 11.04.\n\nFirst of all, the old 2006 binary (found here: http://logging.apache.org/chainsaw/download.html) is capable of detecting appenders registered with a type of _log4j._tcp.local. This is no longer so in the latest revision (although it doesn't really hold me back, personally). I think (per this ticket: https://issues.apache.org/bugzilla/show_bug.cgi?id=48907) that _log4j._tcp.local. was supposed to be supported for backwards compatibility with the ZeroConfSocketHubAppender.\n\nSecondly, I don't think that the ZONEs are formatted correctly for the other appenders/receivers, nor in ZeroConfPlugin.java. For example, I believe that this:\n\n_log4j_xml_udp_appender.local.\n\nshould be:\n\n_log4j_xml_udp_appender._udp.local.\n\nNote the missing `._udp'. I'm not terribly familiar with ZeroConf/mDNS/Bonjour/whatever, but I do believe that the protocol (tcp or udp) is required as part of the registration. Concretely, if I make the suggested change and then try the following ruby code, the appender is correctly configured in Chainsaw:\n\n  require 'dnssd'\n  \n  name = \"My log4j appender\"\n  type = \"_log4j_xml_udp_appender._udp\"\n  domain = nil\n  port = 3689\n  \n  DNSSD.register(name, type, domain, port)\n  \n  puts \"Press enter to exit . . .\"\n  gets\n\n\nIf I wasn't clueless about Java development, I'd give fixing this a shot...\n\n-Charles"},
{"comment_id": "154132", "bug_id": "52765", "who": "Charles Strahan", "text": "There are a couple aspects of this problem for me to address, so here we go. This report is based on the latest trunk of Chainsaw as of earlier today (should be revision 1178454), on Ubuntu 11.04.\n\nFirst of all, the old 2006 binary (found here: http://logging.apache.org/chainsaw/download.html) is capable of detecting appenders registered with a type of _log4j._tcp.local. This is no longer so in the latest revision (although it doesn't really hold me back, personally). I think (per this ticket: https://issues.apache.org/bugzilla/show_bug.cgi?id=48907) that _log4j._tcp.local. was supposed to be supported for backwards compatibility with the ZeroConfSocketHubAppender.\n\nSecondly, I don't think that the ZONEs are formatted correctly for the other appenders/receivers, nor in ZeroConfPlugin.java. For example, I believe that this:\n\n_log4j_xml_udp_appender.local.\n\nshould be:\n\n_log4j_xml_udp_appender._udp.local.\n\nNote the missing `._udp'. I'm not terribly familiar with ZeroConf/mDNS/Bonjour/whatever, but I do believe that the protocol (tcp or udp) is required as part of the registration. Concretely, if I make the suggested change and then try the following ruby code, the appender is correctly configured in Chainsaw:\n\n  require 'dnssd'\n  \n  name = \"My log4j appender\"\n  type = \"_log4j_xml_udp_appender._udp\"\n  domain = nil\n  port = 3689\n  \n  DNSSD.register(name, type, domain, port)\n  \n  puts \"Press enter to exit . . .\"\n  gets\n\n\nIf I wasn't clueless about Java development, I'd give fixing this a shot...\n\n-Charles"},
{"bug_id": "54335", "summary": "Removing columns in the log panel preferences results in \"Exception in thread \"AWT-EventQueue-0\" java.lang.IndexOutOfBoundsException:\" at next run with UdpReceiver and custom properties", "reporter": "Alain Pannetier", "version": "unspecified"},
{"comment_id": "164180", "bug_id": "54335", "who": "Alain Pannetier", "text": "Context: \n- log4net sends log events through UDP transport.\n- on first run, chainsaw receives and displays correctly all columns including the custom properties.\n- Since some columns are irrelevant, they are removed (CurrentTab => LogPanel Preferences => columns)\n- Next day, chainsaw is kicked off again and same events are forwarded to the udp receiver. However, the fist row shows that column contents that should not appear appear in the wrong columns (as if no column had been removed). The second row does not display and the console shows the following exception trace.\n\nException in thread \"AWT-EventQueue-0\" java.lang.IndexOutOfBoundsException: Index: 24, Size: 24\n        at java.util.ArrayList.RangeCheck(Unknown Source)\n        at java.util.ArrayList.get(Unknown Source)\n        at org.apache.log4j.chainsaw.ChainsawCyclicBufferTableModel.getValueAt(ChainsawCyclicBufferTableModel.java:440)\n        at javax.swing.JTable.getValueAt(Unknown Source)\n        at javax.swing.JTable.prepareRenderer(Unknown Source)\n        at javax.swing.plaf.basic.BasicTableUI.paintCell(Unknown Source)\n        at javax.swing.plaf.basic.BasicTableUI.paintCells(Unknown Source)\n        at javax.swing.plaf.basic.BasicTableUI.paint(Unknown Source)\n        at javax.swing.plaf.ComponentUI.update(Unknown Source)\n        at javax.swing.JComponent.paintComponent(Unknown Source)\n        at javax.swing.JComponent.paint(Unknown Source)\n        at javax.swing.JComponent.paintChildren(Unknown Source)\n        at javax.swing.JComponent.paint(Unknown Source)\n        at javax.swing.JViewport.paint(Unknown Source)\n        at javax.swing.JComponent.paintChildren(Unknown Source)\n        at javax.swing.JComponent.paint(Unknown Source)\n        at javax.swing.JComponent.paintChildren(Unknown Source)\n        at javax.swing.JComponent.paint(Unknown Source)\n        at javax.swing.JComponent.paintChildren(Unknown Source)\n        at javax.swing.JSplitPane.paintChildren(Unknown Source)\n        at javax.swing.JComponent.paint(Unknown Source)\n        at javax.swing.JComponent.paintChildren(Unknown Source)\n        at javax.swing.JSplitPane.paintChildren(Unknown Source)\n        at javax.swing.JComponent.paint(Unknown Source)\n        at javax.swing.JComponent.paintToOffscreen(Unknown Source)\n        at javax.swing.BufferStrategyPaintManager.paint(Unknown Source)\n        at javax.swing.RepaintManager.paint(Unknown Source)\n        at javax.swing.JComponent._paintImmediately(Unknown Source)\n        at javax.swing.JComponent.paintImmediately(Unknown Source)\n        at javax.swing.RepaintManager.paintDirtyRegions(Unknown Source)\n        at javax.swing.RepaintManager.paintDirtyRegions(Unknown Source)\n        at javax.swing.RepaintManager.seqPaintDirtyRegions(Unknown Source)\n        at javax.swing.SystemEventQueueUtilities$ComponentWorkRequest.run(Unknown Source)\n        at java.awt.event.InvocationEvent.dispatch(Unknown Source)\n        at java.awt.EventQueue.dispatchEventImpl(Unknown Source)\n        at java.awt.EventQueue.access$000(Unknown Source)\n        at java.awt.EventQueue$1.run(Unknown Source)\n        at java.awt.EventQueue$1.run(Unknown Source)\n        at java.security.AccessController.doPrivileged(Native Method)\n        at java.security.AccessControlContext$1.doIntersectionPrivilege(Unknown Source)\n        at java.awt.EventQueue.dispatchEvent(Unknown Source)\n        at java.awt.EventDispatchThread.pumpOneEventForFilters(Unknown Source)\n        at java.awt.EventDispatchThread.pumpEventsForFilter(Unknown Source)\n        at java.awt.EventDispatchThread.pumpEventsForHierarchy(Unknown Source)\n        at java.awt.EventDispatchThread.pumpEvents(Unknown Source)\n        at java.awt.EventDispatchThread.pumpEvents(Unknown Source)\n        at java.awt.EventDispatchThread.run(Unknown Source)"},
{"bug_id": "56142", "summary": "Java 1.7_u51 refuses to run Chainsaw under WebStart due to security restrictions", "reporter": "Mark Crocker", "version": "unspecified"},
{"comment_id": "173056", "bug_id": "56142", "who": "Mark Crocker", "text": "Under Java 1.7_u51 security has been beefed up, so it now refuses to start Chainsaw 2.0alpha-1.\n\nThe Exception tab of the details window shows:\n\njava.lang.SecurityException: Missing required Permissions manifest attribute in main jar: http://logging.apache.org/chainsaw/webstart/lib/log4j-chainsaw-2.0alpha-1.jar\n\tat com.sun.deploy.security.DeployManifestChecker.verifyMainJar(Unknown Source)\n\tat com.sun.deploy.security.DeployManifestChecker.verifyMainJar(Unknown Source)\n\tat com.sun.javaws.Launcher.doLaunchApp(Unknown Source)\n\tat com.sun.javaws.Launcher.run(Unknown Source)\n\tat java.lang.Thread.run(Unknown Source)"},
{"bug_id": "57487", "summary": "chainsaw v2 - regexp in refine not working", "reporter": null, "version": "unspecified"},
{"comment_id": "180515", "bug_id": "57487", "who": "", "text": "I tried to refine to messages starting with \"ERROR \" and tried all these variants:\n\nMSG like '^ERROR .*'\nMSG like \"^ERROR .*\"\nMSG like /^ERROR .*/\nMSG like ^ERROR .*\n\nAlso with capital \"LIKE\"\n\nCould you please describe in the documentation how the regular expressions are supposed to be entered so that they work?"},
{"bug_id": "57881", "summary": "Additional step required to build project", "reporter": "Kevin Smith", "version": "unspecified"},
{"comment_id": "182786", "bug_id": "57881", "who": "Kevin Smith", "text": "According to the HOWTOBUILD.txt all I needed to do was run mvn install.  However, in a new checkout/build I was forced to first run mvn site:site.  The HOWTOBUILD.txt file should be updated or the site stuff should probably run under a different profile."},
{"bug_id": "29305", "summary": "Chainsaw doesn't see locationinfo from XMLSocketReceiver", "reporter": "Myron Drapal", "version": "unspecified"},
{"comment_id": "58415", "bug_id": "29305", "who": "Myron Drapal", "text": "When using XMLLayout data, locationInfo is discarded by the XMLSocketReceiver, \nbut the same XML data is read properly by the Open File menu item."},
{"bug_id": "30892", "summary": "Log files cannot be closed", "reporter": "Rob Oxspring", "version": "unspecified"},
{"comment_id": "62577", "bug_id": "30892", "who": "Rob Oxspring", "text": "At the moment there is no way to close a log file.  The closest analogue is to\nclear the buffer and hide the tab but if the first step is skipped memory can\nget our of hand."},
{"bug_id": "31089", "summary": "Does not accept ISO8601 dates in focus field", "reporter": "Tuomas Heino", "version": "1.3alpha"},
{"comment_id": "63153", "bug_id": "31089", "who": "Tuomas Heino", "text": "Seems that searching only accepts the US \"/\" delimiter for dates.\nVery confusing for non-US people who wonder why focus doesn't seem to do anything \nwhen you write date comparisons there - it should at least give a clear indication\nof something being wrong.\n\nAs a sidenote that really ought to be reported in another bug, errors handling\nthe input w/ LogFilePatternReceiver really ought to be reported too...\n\nP.S. web start"},
{"bug_id": "38582", "summary": "Chainsaw does not include Receiver JavaDoc in distribution", "reporter": "Paul Smith", "version": "1.3alpha"},
{"comment_id": "85615", "bug_id": "38582", "who": "Paul Smith", "text": "Clicking on any of the Receiver items in the Help menu does nothing because the\nHTML files are not there."},
{"bug_id": "43736", "summary": "Chainsaw does not honor encoding when loading XML files", "reporter": "Curt Arnold", "version": "1.2"},
{"comment_id": "109969", "bug_id": "43736", "who": "Curt Arnold", "text": "On Oct 30, 2007, at 2:16 PM on log4j-user, Jessica Lin wrote:\n\nI want to use Chainsaw to view the log file contains Chinese character. The log file was recorded by \nusing FileAppender which I defined the endoding as \u201cUTF-8\u201d. Here is part of my log4j.properties file.\n\n\n# xml format file appender\nlog4j.appender.xml=org.apache.log4j.FileAppender\nlog4j.appender.xml.file=xml.log\nlog4j.appender.xml.encoding=UTF-8\nlog4j.appender.xml.append=false\nlog4j.appender.xml.layout=org.apache.log4j.xml.XMLLayout\n\nThen  I use Chainsaw to load \u201cxml.log\u201d file. The Chinese characters are shown as \u201c \u00e5\u0160 \u00e8\u00bf\u2122\u00e4\u00b8\u00aa\u00e5\u0160\u0178\u00e8\u0192\u00bd\u201d. \nThe Original characters are \u201c?????\u201d. \n\nI double checked the \u201cxml.log\u201d which did save as UTF-8 encoding. The XMLDecoder file Which \nChainsaw uses to load XML file also use UTF-8 encoding.\n\nCan you help me?\n\nThanks,\n\nJessica\n\n\n---------\n\nThe problem appears to be in o.a.l.xml.XMLDecoder in the receivers companion where at line 186 and \n188, InputStreamReaders are allocated without explicitly specifying an encoding.  That will cause the \nInputStreamReader to use the default platform encoding which appears not be to UTF-8 in this \ninstance.\n\nThe approach is broken and needs to be rewritten to handle any arbitrary encoding.  The XML parser \nshould be presented with a minimal document like:\n\n<!DOCTYPE log4j:eventSet [\n<!ENTITY content SYSTEM \"...\">\n]>\n<log4j:eventSet version=\"1.2\" xmlns:log4j=\"...\">\n    &content;\n</log4:eventSet>\n\nand an entity resolver should then load the URL as a byte stream in response to the resolveEntity call. \n\nFor a work around, anything that sets the default charset for the JVM to UTF-8 should avoid the \nproblem until it can be fixed.  There is not a clearly documented way to do that and it is platform \ndependent.  On a Nix machine, you could try\n\nexport LC_CTYPE=UTF-8\n\non Windows you could try:\n\njava -Dfile.encoding=UTF-8 org.apache.log4j.chainsaw..."},
{"comment_id": "109969", "bug_id": "43736", "who": "Curt Arnold", "text": "On Oct 30, 2007, at 2:16 PM on log4j-user, Jessica Lin wrote:\n\nI want to use Chainsaw to view the log file contains Chinese character. The log file was recorded by \nusing FileAppender which I defined the endoding as \u201cUTF-8\u201d. Here is part of my log4j.properties file.\n\n\n# xml format file appender\nlog4j.appender.xml=org.apache.log4j.FileAppender\nlog4j.appender.xml.file=xml.log\nlog4j.appender.xml.encoding=UTF-8\nlog4j.appender.xml.append=false\nlog4j.appender.xml.layout=org.apache.log4j.xml.XMLLayout\n\nThen  I use Chainsaw to load \u201cxml.log\u201d file. The Chinese characters are shown as \u201c \u00e5\u0160 \u00e8\u00bf\u2122\u00e4\u00b8\u00aa\u00e5\u0160\u0178\u00e8\u0192\u00bd\u201d. \nThe Original characters are \u201c?????\u201d. \n\nI double checked the \u201cxml.log\u201d which did save as UTF-8 encoding. The XMLDecoder file Which \nChainsaw uses to load XML file also use UTF-8 encoding.\n\nCan you help me?\n\nThanks,\n\nJessica\n\n\n---------\n\nThe problem appears to be in o.a.l.xml.XMLDecoder in the receivers companion where at line 186 and \n188, InputStreamReaders are allocated without explicitly specifying an encoding.  That will cause the \nInputStreamReader to use the default platform encoding which appears not be to UTF-8 in this \ninstance.\n\nThe approach is broken and needs to be rewritten to handle any arbitrary encoding.  The XML parser \nshould be presented with a minimal document like:\n\n<!DOCTYPE log4j:eventSet [\n<!ENTITY content SYSTEM \"...\">\n]>\n<log4j:eventSet version=\"1.2\" xmlns:log4j=\"...\">\n    &content;\n</log4:eventSet>\n\nand an entity resolver should then load the URL as a byte stream in response to the resolveEntity call. \n\nFor a work around, anything that sets the default charset for the JVM to UTF-8 should avoid the \nproblem until it can be fixed.  There is not a clearly documented way to do that and it is platform \ndependent.  On a Nix machine, you could try\n\nexport LC_CTYPE=UTF-8\n\non Windows you could try:\n\njava -Dfile.encoding=UTF-8 org.apache.log4j.chainsaw..."},
{"comment_id": "109969", "bug_id": "43736", "who": "Curt Arnold", "text": "On Oct 30, 2007, at 2:16 PM on log4j-user, Jessica Lin wrote:\n\nI want to use Chainsaw to view the log file contains Chinese character. The log file was recorded by \nusing FileAppender which I defined the endoding as \u201cUTF-8\u201d. Here is part of my log4j.properties file.\n\n\n# xml format file appender\nlog4j.appender.xml=org.apache.log4j.FileAppender\nlog4j.appender.xml.file=xml.log\nlog4j.appender.xml.encoding=UTF-8\nlog4j.appender.xml.append=false\nlog4j.appender.xml.layout=org.apache.log4j.xml.XMLLayout\n\nThen  I use Chainsaw to load \u201cxml.log\u201d file. The Chinese characters are shown as \u201c \u00e5\u0160 \u00e8\u00bf\u2122\u00e4\u00b8\u00aa\u00e5\u0160\u0178\u00e8\u0192\u00bd\u201d. \nThe Original characters are \u201c?????\u201d. \n\nI double checked the \u201cxml.log\u201d which did save as UTF-8 encoding. The XMLDecoder file Which \nChainsaw uses to load XML file also use UTF-8 encoding.\n\nCan you help me?\n\nThanks,\n\nJessica\n\n\n---------\n\nThe problem appears to be in o.a.l.xml.XMLDecoder in the receivers companion where at line 186 and \n188, InputStreamReaders are allocated without explicitly specifying an encoding.  That will cause the \nInputStreamReader to use the default platform encoding which appears not be to UTF-8 in this \ninstance.\n\nThe approach is broken and needs to be rewritten to handle any arbitrary encoding.  The XML parser \nshould be presented with a minimal document like:\n\n<!DOCTYPE log4j:eventSet [\n<!ENTITY content SYSTEM \"...\">\n]>\n<log4j:eventSet version=\"1.2\" xmlns:log4j=\"...\">\n    &content;\n</log4:eventSet>\n\nand an entity resolver should then load the URL as a byte stream in response to the resolveEntity call. \n\nFor a work around, anything that sets the default charset for the JVM to UTF-8 should avoid the \nproblem until it can be fixed.  There is not a clearly documented way to do that and it is platform \ndependent.  On a Nix machine, you could try\n\nexport LC_CTYPE=UTF-8\n\non Windows you could try:\n\njava -Dfile.encoding=UTF-8 org.apache.log4j.chainsaw..."},
{"comment_id": "109969", "bug_id": "43736", "who": "Curt Arnold", "text": "On Oct 30, 2007, at 2:16 PM on log4j-user, Jessica Lin wrote:\n\nI want to use Chainsaw to view the log file contains Chinese character. The log file was recorded by \nusing FileAppender which I defined the endoding as \u201cUTF-8\u201d. Here is part of my log4j.properties file.\n\n\n# xml format file appender\nlog4j.appender.xml=org.apache.log4j.FileAppender\nlog4j.appender.xml.file=xml.log\nlog4j.appender.xml.encoding=UTF-8\nlog4j.appender.xml.append=false\nlog4j.appender.xml.layout=org.apache.log4j.xml.XMLLayout\n\nThen  I use Chainsaw to load \u201cxml.log\u201d file. The Chinese characters are shown as \u201c \u00e5\u0160 \u00e8\u00bf\u2122\u00e4\u00b8\u00aa\u00e5\u0160\u0178\u00e8\u0192\u00bd\u201d. \nThe Original characters are \u201c?????\u201d. \n\nI double checked the \u201cxml.log\u201d which did save as UTF-8 encoding. The XMLDecoder file Which \nChainsaw uses to load XML file also use UTF-8 encoding.\n\nCan you help me?\n\nThanks,\n\nJessica\n\n\n---------\n\nThe problem appears to be in o.a.l.xml.XMLDecoder in the receivers companion where at line 186 and \n188, InputStreamReaders are allocated without explicitly specifying an encoding.  That will cause the \nInputStreamReader to use the default platform encoding which appears not be to UTF-8 in this \ninstance.\n\nThe approach is broken and needs to be rewritten to handle any arbitrary encoding.  The XML parser \nshould be presented with a minimal document like:\n\n<!DOCTYPE log4j:eventSet [\n<!ENTITY content SYSTEM \"...\">\n]>\n<log4j:eventSet version=\"1.2\" xmlns:log4j=\"...\">\n    &content;\n</log4:eventSet>\n\nand an entity resolver should then load the URL as a byte stream in response to the resolveEntity call. \n\nFor a work around, anything that sets the default charset for the JVM to UTF-8 should avoid the \nproblem until it can be fixed.  There is not a clearly documented way to do that and it is platform \ndependent.  On a Nix machine, you could try\n\nexport LC_CTYPE=UTF-8\n\non Windows you could try:\n\njava -Dfile.encoding=UTF-8 org.apache.log4j.chainsaw..."},
{"comment_id": "109969", "bug_id": "43736", "who": "Curt Arnold", "text": "On Oct 30, 2007, at 2:16 PM on log4j-user, Jessica Lin wrote:\n\nI want to use Chainsaw to view the log file contains Chinese character. The log file was recorded by \nusing FileAppender which I defined the endoding as \u201cUTF-8\u201d. Here is part of my log4j.properties file.\n\n\n# xml format file appender\nlog4j.appender.xml=org.apache.log4j.FileAppender\nlog4j.appender.xml.file=xml.log\nlog4j.appender.xml.encoding=UTF-8\nlog4j.appender.xml.append=false\nlog4j.appender.xml.layout=org.apache.log4j.xml.XMLLayout\n\nThen  I use Chainsaw to load \u201cxml.log\u201d file. The Chinese characters are shown as \u201c \u00e5\u0160 \u00e8\u00bf\u2122\u00e4\u00b8\u00aa\u00e5\u0160\u0178\u00e8\u0192\u00bd\u201d. \nThe Original characters are \u201c?????\u201d. \n\nI double checked the \u201cxml.log\u201d which did save as UTF-8 encoding. The XMLDecoder file Which \nChainsaw uses to load XML file also use UTF-8 encoding.\n\nCan you help me?\n\nThanks,\n\nJessica\n\n\n---------\n\nThe problem appears to be in o.a.l.xml.XMLDecoder in the receivers companion where at line 186 and \n188, InputStreamReaders are allocated without explicitly specifying an encoding.  That will cause the \nInputStreamReader to use the default platform encoding which appears not be to UTF-8 in this \ninstance.\n\nThe approach is broken and needs to be rewritten to handle any arbitrary encoding.  The XML parser \nshould be presented with a minimal document like:\n\n<!DOCTYPE log4j:eventSet [\n<!ENTITY content SYSTEM \"...\">\n]>\n<log4j:eventSet version=\"1.2\" xmlns:log4j=\"...\">\n    &content;\n</log4:eventSet>\n\nand an entity resolver should then load the URL as a byte stream in response to the resolveEntity call. \n\nFor a work around, anything that sets the default charset for the JVM to UTF-8 should avoid the \nproblem until it can be fixed.  There is not a clearly documented way to do that and it is platform \ndependent.  On a Nix machine, you could try\n\nexport LC_CTYPE=UTF-8\n\non Windows you could try:\n\njava -Dfile.encoding=UTF-8 org.apache.log4j.chainsaw..."},
{"comment_id": "109969", "bug_id": "43736", "who": "Curt Arnold", "text": "On Oct 30, 2007, at 2:16 PM on log4j-user, Jessica Lin wrote:\n\nI want to use Chainsaw to view the log file contains Chinese character. The log file was recorded by \nusing FileAppender which I defined the endoding as \u201cUTF-8\u201d. Here is part of my log4j.properties file.\n\n\n# xml format file appender\nlog4j.appender.xml=org.apache.log4j.FileAppender\nlog4j.appender.xml.file=xml.log\nlog4j.appender.xml.encoding=UTF-8\nlog4j.appender.xml.append=false\nlog4j.appender.xml.layout=org.apache.log4j.xml.XMLLayout\n\nThen  I use Chainsaw to load \u201cxml.log\u201d file. The Chinese characters are shown as \u201c \u00e5\u0160 \u00e8\u00bf\u2122\u00e4\u00b8\u00aa\u00e5\u0160\u0178\u00e8\u0192\u00bd\u201d. \nThe Original characters are \u201c?????\u201d. \n\nI double checked the \u201cxml.log\u201d which did save as UTF-8 encoding. The XMLDecoder file Which \nChainsaw uses to load XML file also use UTF-8 encoding.\n\nCan you help me?\n\nThanks,\n\nJessica\n\n\n---------\n\nThe problem appears to be in o.a.l.xml.XMLDecoder in the receivers companion where at line 186 and \n188, InputStreamReaders are allocated without explicitly specifying an encoding.  That will cause the \nInputStreamReader to use the default platform encoding which appears not be to UTF-8 in this \ninstance.\n\nThe approach is broken and needs to be rewritten to handle any arbitrary encoding.  The XML parser \nshould be presented with a minimal document like:\n\n<!DOCTYPE log4j:eventSet [\n<!ENTITY content SYSTEM \"...\">\n]>\n<log4j:eventSet version=\"1.2\" xmlns:log4j=\"...\">\n    &content;\n</log4:eventSet>\n\nand an entity resolver should then load the URL as a byte stream in response to the resolveEntity call. \n\nFor a work around, anything that sets the default charset for the JVM to UTF-8 should avoid the \nproblem until it can be fixed.  There is not a clearly documented way to do that and it is platform \ndependent.  On a Nix machine, you could try\n\nexport LC_CTYPE=UTF-8\n\non Windows you could try:\n\njava -Dfile.encoding=UTF-8 org.apache.log4j.chainsaw..."},
{"comment_id": "109969", "bug_id": "43736", "who": "Curt Arnold", "text": "On Oct 30, 2007, at 2:16 PM on log4j-user, Jessica Lin wrote:\n\nI want to use Chainsaw to view the log file contains Chinese character. The log file was recorded by \nusing FileAppender which I defined the endoding as \u201cUTF-8\u201d. Here is part of my log4j.properties file.\n\n\n# xml format file appender\nlog4j.appender.xml=org.apache.log4j.FileAppender\nlog4j.appender.xml.file=xml.log\nlog4j.appender.xml.encoding=UTF-8\nlog4j.appender.xml.append=false\nlog4j.appender.xml.layout=org.apache.log4j.xml.XMLLayout\n\nThen  I use Chainsaw to load \u201cxml.log\u201d file. The Chinese characters are shown as \u201c \u00e5\u0160 \u00e8\u00bf\u2122\u00e4\u00b8\u00aa\u00e5\u0160\u0178\u00e8\u0192\u00bd\u201d. \nThe Original characters are \u201c?????\u201d. \n\nI double checked the \u201cxml.log\u201d which did save as UTF-8 encoding. The XMLDecoder file Which \nChainsaw uses to load XML file also use UTF-8 encoding.\n\nCan you help me?\n\nThanks,\n\nJessica\n\n\n---------\n\nThe problem appears to be in o.a.l.xml.XMLDecoder in the receivers companion where at line 186 and \n188, InputStreamReaders are allocated without explicitly specifying an encoding.  That will cause the \nInputStreamReader to use the default platform encoding which appears not be to UTF-8 in this \ninstance.\n\nThe approach is broken and needs to be rewritten to handle any arbitrary encoding.  The XML parser \nshould be presented with a minimal document like:\n\n<!DOCTYPE log4j:eventSet [\n<!ENTITY content SYSTEM \"...\">\n]>\n<log4j:eventSet version=\"1.2\" xmlns:log4j=\"...\">\n    &content;\n</log4:eventSet>\n\nand an entity resolver should then load the URL as a byte stream in response to the resolveEntity call. \n\nFor a work around, anything that sets the default charset for the JVM to UTF-8 should avoid the \nproblem until it can be fixed.  There is not a clearly documented way to do that and it is platform \ndependent.  On a Nix machine, you could try\n\nexport LC_CTYPE=UTF-8\n\non Windows you could try:\n\njava -Dfile.encoding=UTF-8 org.apache.log4j.chainsaw..."},
{"bug_id": "31179", "summary": "Implement Chainsaw as Eclipse stand-alone application.", "reporter": "Colbert Philippe", "version": "unspecified"},
{"comment_id": "63405", "bug_id": "31179", "who": "Colbert Philippe", "text": "Chainsaw should allow users to add different views of the process such as:\n \n1 - Live charts of various kinds (using several chart libraries for Java).\n3 - 2D Graphics (using SVG)\n3 - 3D Graphics (using VRML)\n2 - Voice (using VoiceML)\n3 \u2013 User-customized views (using any Java)\n \nI want to point out that almost all these views are already available under\nEclipse (www.Eclipse.org - open-source).   An easy way your team could support\nall these views is to make Chainsaw an Eclipse stand-alone application.  Eclipse\nalready supports a very flexible and modern XML based extension facility.   By\nadopting Eclipse, Chainsaw would become a very powerful process viewer indeed.\n \nRegards,"},
{"comment_id": "63405", "bug_id": "31179", "who": "Colbert Philippe", "text": "Chainsaw should allow users to add different views of the process such as:\n \n1 - Live charts of various kinds (using several chart libraries for Java).\n3 - 2D Graphics (using SVG)\n3 - 3D Graphics (using VRML)\n2 - Voice (using VoiceML)\n3 \u2013 User-customized views (using any Java)\n \nI want to point out that almost all these views are already available under\nEclipse (www.Eclipse.org - open-source).   An easy way your team could support\nall these views is to make Chainsaw an Eclipse stand-alone application.  Eclipse\nalready supports a very flexible and modern XML based extension facility.   By\nadopting Eclipse, Chainsaw would become a very powerful process viewer indeed.\n \nRegards,"},
{"comment_id": "63405", "bug_id": "31179", "who": "Colbert Philippe", "text": "Chainsaw should allow users to add different views of the process such as:\n \n1 - Live charts of various kinds (using several chart libraries for Java).\n3 - 2D Graphics (using SVG)\n3 - 3D Graphics (using VRML)\n2 - Voice (using VoiceML)\n3 \u2013 User-customized views (using any Java)\n \nI want to point out that almost all these views are already available under\nEclipse (www.Eclipse.org - open-source).   An easy way your team could support\nall these views is to make Chainsaw an Eclipse stand-alone application.  Eclipse\nalready supports a very flexible and modern XML based extension facility.   By\nadopting Eclipse, Chainsaw would become a very powerful process viewer indeed.\n \nRegards,"},
{"comment_id": "63405", "bug_id": "31179", "who": "Colbert Philippe", "text": "Chainsaw should allow users to add different views of the process such as:\n \n1 - Live charts of various kinds (using several chart libraries for Java).\n3 - 2D Graphics (using SVG)\n3 - 3D Graphics (using VRML)\n2 - Voice (using VoiceML)\n3 \u2013 User-customized views (using any Java)\n \nI want to point out that almost all these views are already available under\nEclipse (www.Eclipse.org - open-source).   An easy way your team could support\nall these views is to make Chainsaw an Eclipse stand-alone application.  Eclipse\nalready supports a very flexible and modern XML based extension facility.   By\nadopting Eclipse, Chainsaw would become a very powerful process viewer indeed.\n \nRegards,"},
{"comment_id": "63405", "bug_id": "31179", "who": "Colbert Philippe", "text": "Chainsaw should allow users to add different views of the process such as:\n \n1 - Live charts of various kinds (using several chart libraries for Java).\n3 - 2D Graphics (using SVG)\n3 - 3D Graphics (using VRML)\n2 - Voice (using VoiceML)\n3 \u2013 User-customized views (using any Java)\n \nI want to point out that almost all these views are already available under\nEclipse (www.Eclipse.org - open-source).   An easy way your team could support\nall these views is to make Chainsaw an Eclipse stand-alone application.  Eclipse\nalready supports a very flexible and modern XML based extension facility.   By\nadopting Eclipse, Chainsaw would become a very powerful process viewer indeed.\n \nRegards,"},
{"bug_id": "42883", "summary": "'Welcome' and 'Drag & Drop' panels can't be hidden or shown", "reporter": "Isuru Suriarachchi", "version": "unspecified"},
{"comment_id": "105356", "bug_id": "42883", "who": "Isuru Suriarachchi", "text": "Normal Chainsaw log panels can be hidden or shown as the user needs. But this\nfeature is not working with 'Welcome' and 'Drag & Drop' panels. Hiding these\npanels also can be useful for some users to concentrate only one one panel."},
{"comment_id": "105356", "bug_id": "42883", "who": "Isuru Suriarachchi", "text": "Normal Chainsaw log panels can be hidden or shown as the user needs. But this\nfeature is not working with 'Welcome' and 'Drag & Drop' panels. Hiding these\npanels also can be useful for some users to concentrate only one one panel."},
{"comment_id": "105356", "bug_id": "42883", "who": "Isuru Suriarachchi", "text": "Normal Chainsaw log panels can be hidden or shown as the user needs. But this\nfeature is not working with 'Welcome' and 'Drag & Drop' panels. Hiding these\npanels also can be useful for some users to concentrate only one one panel."},
{"comment_id": "105356", "bug_id": "42883", "who": "Isuru Suriarachchi", "text": "Normal Chainsaw log panels can be hidden or shown as the user needs. But this\nfeature is not working with 'Welcome' and 'Drag & Drop' panels. Hiding these\npanels also can be useful for some users to concentrate only one one panel."},
{"comment_id": "105356", "bug_id": "42883", "who": "Isuru Suriarachchi", "text": "Normal Chainsaw log panels can be hidden or shown as the user needs. But this\nfeature is not working with 'Welcome' and 'Drag & Drop' panels. Hiding these\npanels also can be useful for some users to concentrate only one one panel."},
{"comment_id": "105356", "bug_id": "42883", "who": "Isuru Suriarachchi", "text": "Normal Chainsaw log panels can be hidden or shown as the user needs. But this\nfeature is not working with 'Welcome' and 'Drag & Drop' panels. Hiding these\npanels also can be useful for some users to concentrate only one one panel."},
{"comment_id": "105356", "bug_id": "42883", "who": "Isuru Suriarachchi", "text": "Normal Chainsaw log panels can be hidden or shown as the user needs. But this\nfeature is not working with 'Welcome' and 'Drag & Drop' panels. Hiding these\npanels also can be useful for some users to concentrate only one one panel."},
{"comment_id": "105356", "bug_id": "42883", "who": "Isuru Suriarachchi", "text": "Normal Chainsaw log panels can be hidden or shown as the user needs. But this\nfeature is not working with 'Welcome' and 'Drag & Drop' panels. Hiding these\npanels also can be useful for some users to concentrate only one one panel."},
{"comment_id": "105356", "bug_id": "42883", "who": "Isuru Suriarachchi", "text": "Normal Chainsaw log panels can be hidden or shown as the user needs. But this\nfeature is not working with 'Welcome' and 'Drag & Drop' panels. Hiding these\npanels also can be useful for some users to concentrate only one one panel."},
{"comment_id": "105356", "bug_id": "42883", "who": "Isuru Suriarachchi", "text": "Normal Chainsaw log panels can be hidden or shown as the user needs. But this\nfeature is not working with 'Welcome' and 'Drag & Drop' panels. Hiding these\npanels also can be useful for some users to concentrate only one one panel."},
{"comment_id": "105356", "bug_id": "42883", "who": "Isuru Suriarachchi", "text": "Normal Chainsaw log panels can be hidden or shown as the user needs. But this\nfeature is not working with 'Welcome' and 'Drag & Drop' panels. Hiding these\npanels also can be useful for some users to concentrate only one one panel."},
{"comment_id": "105356", "bug_id": "42883", "who": "Isuru Suriarachchi", "text": "Normal Chainsaw log panels can be hidden or shown as the user needs. But this\nfeature is not working with 'Welcome' and 'Drag & Drop' panels. Hiding these\npanels also can be useful for some users to concentrate only one one panel."},
{"bug_id": "34738", "summary": "Chainsaw does not remember what Columns are selected", "reporter": "Asgeir Nilsen", "version": "1.3alpha"},
{"comment_id": "74434", "bug_id": "34738", "who": "Asgeir Nilsen", "text": "In LogPanel Preferences, I am able to de-select columns.  However, this\nexclusion of columns is not remembered when I restart Chainsaw.\n\nThe Tab Identifier in use is PROP.metro2.hostname, which gives the host name of\nthe server issuing the LogEvent (an in-house custom extension to XMLLayout\nhandles this).\n\nMy C:\\Documents and Settings\\t510242\\.chainsaw folder does contain\nHOSTNAME.columns files, but they seem to be disregarded."},
{"comment_id": "74434", "bug_id": "34738", "who": "Asgeir Nilsen", "text": "In LogPanel Preferences, I am able to de-select columns.  However, this\nexclusion of columns is not remembered when I restart Chainsaw.\n\nThe Tab Identifier in use is PROP.metro2.hostname, which gives the host name of\nthe server issuing the LogEvent (an in-house custom extension to XMLLayout\nhandles this).\n\nMy C:\\Documents and Settings\\t510242\\.chainsaw folder does contain\nHOSTNAME.columns files, but they seem to be disregarded."},
{"comment_id": "74434", "bug_id": "34738", "who": "Asgeir Nilsen", "text": "In LogPanel Preferences, I am able to de-select columns.  However, this\nexclusion of columns is not remembered when I restart Chainsaw.\n\nThe Tab Identifier in use is PROP.metro2.hostname, which gives the host name of\nthe server issuing the LogEvent (an in-house custom extension to XMLLayout\nhandles this).\n\nMy C:\\Documents and Settings\\t510242\\.chainsaw folder does contain\nHOSTNAME.columns files, but they seem to be disregarded."},
{"comment_id": "154132", "bug_id": "52765", "who": "Charles Strahan", "text": "There are a couple aspects of this problem for me to address, so here we go. This report is based on the latest trunk of Chainsaw as of earlier today (should be revision 1178454), on Ubuntu 11.04.\n\nFirst of all, the old 2006 binary (found here: http://logging.apache.org/chainsaw/download.html) is capable of detecting appenders registered with a type of _log4j._tcp.local. This is no longer so in the latest revision (although it doesn't really hold me back, personally). I think (per this ticket: https://issues.apache.org/bugzilla/show_bug.cgi?id=48907) that _log4j._tcp.local. was supposed to be supported for backwards compatibility with the ZeroConfSocketHubAppender.\n\nSecondly, I don't think that the ZONEs are formatted correctly for the other appenders/receivers, nor in ZeroConfPlugin.java. For example, I believe that this:\n\n_log4j_xml_udp_appender.local.\n\nshould be:\n\n_log4j_xml_udp_appender._udp.local.\n\nNote the missing `._udp'. I'm not terribly familiar with ZeroConf/mDNS/Bonjour/whatever, but I do believe that the protocol (tcp or udp) is required as part of the registration. Concretely, if I make the suggested change and then try the following ruby code, the appender is correctly configured in Chainsaw:\n\n  require 'dnssd'\n  \n  name = \"My log4j appender\"\n  type = \"_log4j_xml_udp_appender._udp\"\n  domain = nil\n  port = 3689\n  \n  DNSSD.register(name, type, domain, port)\n  \n  puts \"Press enter to exit . . .\"\n  gets\n\n\nIf I wasn't clueless about Java development, I'd give fixing this a shot...\n\n-Charles"},
{"comment_id": "154132", "bug_id": "52765", "who": "Charles Strahan", "text": "There are a couple aspects of this problem for me to address, so here we go. This report is based on the latest trunk of Chainsaw as of earlier today (should be revision 1178454), on Ubuntu 11.04.\n\nFirst of all, the old 2006 binary (found here: http://logging.apache.org/chainsaw/download.html) is capable of detecting appenders registered with a type of _log4j._tcp.local. This is no longer so in the latest revision (although it doesn't really hold me back, personally). I think (per this ticket: https://issues.apache.org/bugzilla/show_bug.cgi?id=48907) that _log4j._tcp.local. was supposed to be supported for backwards compatibility with the ZeroConfSocketHubAppender.\n\nSecondly, I don't think that the ZONEs are formatted correctly for the other appenders/receivers, nor in ZeroConfPlugin.java. For example, I believe that this:\n\n_log4j_xml_udp_appender.local.\n\nshould be:\n\n_log4j_xml_udp_appender._udp.local.\n\nNote the missing `._udp'. I'm not terribly familiar with ZeroConf/mDNS/Bonjour/whatever, but I do believe that the protocol (tcp or udp) is required as part of the registration. Concretely, if I make the suggested change and then try the following ruby code, the appender is correctly configured in Chainsaw:\n\n  require 'dnssd'\n  \n  name = \"My log4j appender\"\n  type = \"_log4j_xml_udp_appender._udp\"\n  domain = nil\n  port = 3689\n  \n  DNSSD.register(name, type, domain, port)\n  \n  puts \"Press enter to exit . . .\"\n  gets\n\n\nIf I wasn't clueless about Java development, I'd give fixing this a shot...\n\n-Charles"},
{"comment_id": "154132", "bug_id": "52765", "who": "Charles Strahan", "text": "There are a couple aspects of this problem for me to address, so here we go. This report is based on the latest trunk of Chainsaw as of earlier today (should be revision 1178454), on Ubuntu 11.04.\n\nFirst of all, the old 2006 binary (found here: http://logging.apache.org/chainsaw/download.html) is capable of detecting appenders registered with a type of _log4j._tcp.local. This is no longer so in the latest revision (although it doesn't really hold me back, personally). I think (per this ticket: https://issues.apache.org/bugzilla/show_bug.cgi?id=48907) that _log4j._tcp.local. was supposed to be supported for backwards compatibility with the ZeroConfSocketHubAppender.\n\nSecondly, I don't think that the ZONEs are formatted correctly for the other appenders/receivers, nor in ZeroConfPlugin.java. For example, I believe that this:\n\n_log4j_xml_udp_appender.local.\n\nshould be:\n\n_log4j_xml_udp_appender._udp.local.\n\nNote the missing `._udp'. I'm not terribly familiar with ZeroConf/mDNS/Bonjour/whatever, but I do believe that the protocol (tcp or udp) is required as part of the registration. Concretely, if I make the suggested change and then try the following ruby code, the appender is correctly configured in Chainsaw:\n\n  require 'dnssd'\n  \n  name = \"My log4j appender\"\n  type = \"_log4j_xml_udp_appender._udp\"\n  domain = nil\n  port = 3689\n  \n  DNSSD.register(name, type, domain, port)\n  \n  puts \"Press enter to exit . . .\"\n  gets\n\n\nIf I wasn't clueless about Java development, I'd give fixing this a shot...\n\n-Charles"},
{"bug_id": "35239", "summary": "NullPointerException when saving displayed events", "reporter": "David Rudloff", "version": "1.3alpha"},
{"comment_id": "76071", "bug_id": "35239", "who": "David Rudloff", "text": "On chainsaw-bundle (1.3.alpha7), I defined a LogFilePatternReceiver for a file\ncontaining the following line:\n<<\n[02.11.14 10:55:46:743 CET] 14d0798 AdminServer   A ADMS0002I: Initializing\nWebSphere Administration server\n>>\n\nThe receiver has the following definition:\n  <plugin name=\"logfile\" class=\"org.apache.log4j.varia.LogFilePatternReceiver\">\n    <param name=\"timestampFormat\" value=\"yy.MM.dd HH:mm:ss:SSS\"/>\n    <param name=\"logFormat\" value=\"[TIMESTAMP *] * LOGGER CLASS: MESSAGE\"/>\n    <param name=\"fileURL\" value=\"file:///E:/trace.log\"/>\n    <param name=\"tailing\" value=\"true\"/>\n     <param name=\"name\" value=\"tracefile\"/>\n</plugin >\n\nWhen trying the \"Save as\" action, the following exception occurs and the action\nfails:\n<<\njava.lang.NullPointerException\n        at java.io.Writer.write(Writer.java:126)\n        at org.apache.log4j.xml.XMLLayout.format(XMLLayout.java:191)\n        at org.apache.log4j.Layout.format(Layout.java:57)\n        at\norg.apache.log4j.chainsaw.FileSaveAction.actionPerformed(FileSaveAction.java:110)\n        at javax.swing.AbstractButton.fireActionPerformed(AbstractButton.java:1786)\n        at\njavax.swing.AbstractButton$ForwardActionEvents.actionPerformed(AbstractButton.java:1839)\n        at\njavax.swing.DefaultButtonModel.fireActionPerformed(DefaultButtonModel.java:420)\n        at javax.swing.DefaultButtonModel.setPressed(DefaultButtonModel.java:258\n)        at\njavax.swing.plaf.basic.BasicButtonListener.mouseReleased(BasicButtonListener.java:245)\n        at java.awt.AWTEventMulticaster.mouseReleased(AWTEventMulticaster.java:231)\n        at java.awt.AWTEventMulticaster.mouseReleased(AWTEventMulticaster.java:231)\n        at java.awt.AWTEventMulticaster.mouseReleased(AWTEventMulticaster.java:231)\n        at java.awt.Component.processMouseEvent(Component.java:5100)\n>>\n\nIt seems that in this case the parser sets the null value to some fields instead\nof the \"?\" value.\nAny workaround ?"},
{"comment_id": "76071", "bug_id": "35239", "who": "David Rudloff", "text": "On chainsaw-bundle (1.3.alpha7), I defined a LogFilePatternReceiver for a file\ncontaining the following line:\n<<\n[02.11.14 10:55:46:743 CET] 14d0798 AdminServer   A ADMS0002I: Initializing\nWebSphere Administration server\n>>\n\nThe receiver has the following definition:\n  <plugin name=\"logfile\" class=\"org.apache.log4j.varia.LogFilePatternReceiver\">\n    <param name=\"timestampFormat\" value=\"yy.MM.dd HH:mm:ss:SSS\"/>\n    <param name=\"logFormat\" value=\"[TIMESTAMP *] * LOGGER CLASS: MESSAGE\"/>\n    <param name=\"fileURL\" value=\"file:///E:/trace.log\"/>\n    <param name=\"tailing\" value=\"true\"/>\n     <param name=\"name\" value=\"tracefile\"/>\n</plugin >\n\nWhen trying the \"Save as\" action, the following exception occurs and the action\nfails:\n<<\njava.lang.NullPointerException\n        at java.io.Writer.write(Writer.java:126)\n        at org.apache.log4j.xml.XMLLayout.format(XMLLayout.java:191)\n        at org.apache.log4j.Layout.format(Layout.java:57)\n        at\norg.apache.log4j.chainsaw.FileSaveAction.actionPerformed(FileSaveAction.java:110)\n        at javax.swing.AbstractButton.fireActionPerformed(AbstractButton.java:1786)\n        at\njavax.swing.AbstractButton$ForwardActionEvents.actionPerformed(AbstractButton.java:1839)\n        at\njavax.swing.DefaultButtonModel.fireActionPerformed(DefaultButtonModel.java:420)\n        at javax.swing.DefaultButtonModel.setPressed(DefaultButtonModel.java:258\n)        at\njavax.swing.plaf.basic.BasicButtonListener.mouseReleased(BasicButtonListener.java:245)\n        at java.awt.AWTEventMulticaster.mouseReleased(AWTEventMulticaster.java:231)\n        at java.awt.AWTEventMulticaster.mouseReleased(AWTEventMulticaster.java:231)\n        at java.awt.AWTEventMulticaster.mouseReleased(AWTEventMulticaster.java:231)\n        at java.awt.Component.processMouseEvent(Component.java:5100)\n>>\n\nIt seems that in this case the parser sets the null value to some fields instead\nof the \"?\" value.\nAny workaround ?"},
{"bug_id": "46573", "summary": "MDC attributes cant't be displayed on Chainsaw", "reporter": "noname", "version": "1.2"},
{"comment_id": "124222", "bug_id": "46573", "who": "noname", "text": "MDC attributes cant't be displayed on Chainsaw (through SocketAppender)\nTested with log4j 1.2.14."},
{"comment_id": "124222", "bug_id": "46573", "who": "noname", "text": "MDC attributes cant't be displayed on Chainsaw (through SocketAppender)\nTested with log4j 1.2.14."},
{"bug_id": "26084", "summary": "Log Event detail panel does not show special characters", "reporter": "Alexander Fedorenko", "version": "1.3alpha"},
{"comment_id": "50440", "bug_id": "26084", "who": "Alexander Fedorenko", "text": "It is about new Chainsaw ,\n\ncharacters with special meaning to HTML are not escaped ."},
{"comment_id": "50440", "bug_id": "26084", "who": "Alexander Fedorenko", "text": "It is about new Chainsaw ,\n\ncharacters with special meaning to HTML are not escaped ."},
{"bug_id": "29244", "summary": "Preserve XML content in log messages when using XMLLayout and XMLSocketReceiver", "reporter": "Asgeir Nilsen", "version": "1.3alpha"},
{"comment_id": "58197", "bug_id": "29244", "who": "Asgeir Nilsen", "text": "Hello,\n\nWe use XMLLayout and XMLSocketReceiver for displaying logging events in Chainsaw \n1.99.99.\n\nHowever, logging events containing XML documents come up quite unreadable, as \nall &lt; characters are removed from the output.\n\nI would expect that the events arrive in Chainsaw correctly, as CDATA tags are \nenclosed around the <log4j:message> elements."},
{"comment_id": "58197", "bug_id": "29244", "who": "Asgeir Nilsen", "text": "Hello,\n\nWe use XMLLayout and XMLSocketReceiver for displaying logging events in Chainsaw \n1.99.99.\n\nHowever, logging events containing XML documents come up quite unreadable, as \nall &lt; characters are removed from the output.\n\nI would expect that the events arrive in Chainsaw correctly, as CDATA tags are \nenclosed around the <log4j:message> elements."},
{"bug_id": "30888", "summary": "Chainsaw mixes files in same panel", "reporter": "Rob Oxspring", "version": "unspecified"},
{"comment_id": "62573", "bug_id": "30888", "who": "Rob Oxspring", "text": "If two files with the same name are opened (from different directories) then the\nevents of the second are added to the first instead of using a new tab.  It gets\nparticularly grim if the panel has been 'hidden' between loading the first and\nsecond file because the second one appears not to load at all.  This is totally\nunintuitive IMHO and certainly leads to confusion in my team."},
{"comment_id": "62573", "bug_id": "30888", "who": "Rob Oxspring", "text": "If two files with the same name are opened (from different directories) then the\nevents of the second are added to the first instead of using a new tab.  It gets\nparticularly grim if the panel has been 'hidden' between loading the first and\nsecond file because the second one appears not to load at all.  This is totally\nunintuitive IMHO and certainly leads to confusion in my team."},
{"comment_id": "62573", "bug_id": "30888", "who": "Rob Oxspring", "text": "If two files with the same name are opened (from different directories) then the\nevents of the second are added to the first instead of using a new tab.  It gets\nparticularly grim if the panel has been 'hidden' between loading the first and\nsecond file because the second one appears not to load at all.  This is totally\nunintuitive IMHO and certainly leads to confusion in my team."},
{"comment_id": "62573", "bug_id": "30888", "who": "Rob Oxspring", "text": "If two files with the same name are opened (from different directories) then the\nevents of the second are added to the first instead of using a new tab.  It gets\nparticularly grim if the panel has been 'hidden' between loading the first and\nsecond file because the second one appears not to load at all.  This is totally\nunintuitive IMHO and certainly leads to confusion in my team."},
{"comment_id": "62573", "bug_id": "30888", "who": "Rob Oxspring", "text": "If two files with the same name are opened (from different directories) then the\nevents of the second are added to the first instead of using a new tab.  It gets\nparticularly grim if the panel has been 'hidden' between loading the first and\nsecond file because the second one appears not to load at all.  This is totally\nunintuitive IMHO and certainly leads to confusion in my team."},
{"comment_id": "62573", "bug_id": "30888", "who": "Rob Oxspring", "text": "If two files with the same name are opened (from different directories) then the\nevents of the second are added to the first instead of using a new tab.  It gets\nparticularly grim if the panel has been 'hidden' between loading the first and\nsecond file because the second one appears not to load at all.  This is totally\nunintuitive IMHO and certainly leads to confusion in my team."},
{"comment_id": "62573", "bug_id": "30888", "who": "Rob Oxspring", "text": "If two files with the same name are opened (from different directories) then the\nevents of the second are added to the first instead of using a new tab.  It gets\nparticularly grim if the panel has been 'hidden' between loading the first and\nsecond file because the second one appears not to load at all.  This is totally\nunintuitive IMHO and certainly leads to confusion in my team."},
{"comment_id": "62573", "bug_id": "30888", "who": "Rob Oxspring", "text": "If two files with the same name are opened (from different directories) then the\nevents of the second are added to the first instead of using a new tab.  It gets\nparticularly grim if the panel has been 'hidden' between loading the first and\nsecond file because the second one appears not to load at all.  This is totally\nunintuitive IMHO and certainly leads to confusion in my team."},
{"bug_id": "31178", "summary": "Exception using Chainsaw for simple debugging", "reporter": "Christian Ashby", "version": "1.2"},
{"comment_id": "63403", "bug_id": "31178", "who": "Christian Ashby", "text": "See below for error, log4j.properties entries, etc.\n\nClassNotFoundException is thrown in chainsaw when trying to use a default \nSocketAppender and SimpleListener.\n\nChainsaw v2.0alpha loaded via WebStart on JDK 1.4.2 IE 6 Windows XP SP2, log4j \nversion 1.2.8\n\nTried reinstall of jdk, jvm and chainsaw\n\nException thrown:\n-----------------\nLevel\nERROR\nLogger\norg.apache.log4j.net.SocketNode\nTime\n2004-09-11 11:09:18,046\nThread\nThread-10\nMessage\nUnexpected exception. Closing connection.\nNDC\nnull\nClass\n\nMethod\n\nLine\n\nFile\n\nProperties\n{{log4jid,1}}\nThrowable\njava.lang.ClassNotFoundException: org.apache.log4j.spi.LocationInfo\n\tat com.sun.jnlp.JNLPClassLoader$1.run(Unknown Source)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat com.sun.jnlp.JNLPClassLoader.findClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClassInternal(Unknown Source)\n\tat java.lang.Class.forName0(Native Method)\n\tat java.lang.Class.forName(Unknown Source)\n\tat java.io.ObjectInputStream.resolveClass(Unknown Source)\n\tat java.io.ObjectInputStream.readNonProxyDesc(Unknown Source)\n\tat java.io.ObjectInputStream.readClassDesc(Unknown Source)\n\tat java.io.ObjectInputStream.readOrdinaryObject(Unknown Source)\n\tat java.io.ObjectInputStream.readObject0(Unknown Source)\n\tat java.io.ObjectInputStream.defaultReadFields(Unknown Source)\n\tat java.io.ObjectInputStream.defaultReadObject(Unknown Source)\n\tat org.apache.log4j.spi.LoggingEvent.readObject(LoggingEvent.java:848)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\n\tat java.lang.reflect.Method.invoke(Unknown Source)\n\tat java.io.ObjectStreamClass.invokeReadObject(Unknown Source)\n\tat java.io.ObjectInputStream.readSerialData(Unknown Source)\n\tat java.io.ObjectInputStream.readOrdinaryObject(Unknown Source)\n\tat java.io.ObjectInputStream.readObject0(Unknown Source)\n\tat java.io.ObjectInputStream.readObject(Unknown Source)\n\tat org.apache.log4j.net.SocketNode.run(SocketNode.java:134)\n\tat java.lang.Thread.run(Unknown Source)\n\nProperties file:\n----------------\n# Set root logger level to DEBUG and its appenders to stdout and R.\nlog4j.rootLogger=debug, stdout, R, Socket\n\nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender\nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout\n\n# Pattern to output the caller's file name and line number.\nlog4j.appender.stdout.layout.ConversionPattern=%5p [%t] (%c\\:%L) - %m%n\n\nlog4j.appender.R=org.apache.log4j.RollingFileAppender\nlog4j.appender.R.File=c:/spl_log4j.log\nlog4j.appender.R.MaxFileSize=512KB\nlog4j.appender.R.MaxBackupIndex=1\nlog4j.appender.R.layout=org.apache.log4j.PatternLayout\nlog4j.appender.R.layout.ConversionPattern=%p %t %c - %m%n\n\nlog4j.appender.Socket=org.apache.log4j.net.SocketAppender\nlog4j.appender.Socket.RemoteHost=localhost\nlog4j.appender.Socket.Port=4445\n\nTest class for debugging:\n-------------------------\npublic class test {\n\n\tpublic static void main( String[] args ) {\n\t\torg.apache.log4j.Logger.getLogger(\"test class\").debug(\"Testing \nlogging\");\n\t}\n}\n\n(Class being compiled & run with just log4j in the classpath)\n(log4j.properties is being read correctly)\n\nOutput in file that is logged (works as expected)\n-----------------------------\nDEBUG main test class - Testing logging"},
{"comment_id": "63403", "bug_id": "31178", "who": "Christian Ashby", "text": "See below for error, log4j.properties entries, etc.\n\nClassNotFoundException is thrown in chainsaw when trying to use a default \nSocketAppender and SimpleListener.\n\nChainsaw v2.0alpha loaded via WebStart on JDK 1.4.2 IE 6 Windows XP SP2, log4j \nversion 1.2.8\n\nTried reinstall of jdk, jvm and chainsaw\n\nException thrown:\n-----------------\nLevel\nERROR\nLogger\norg.apache.log4j.net.SocketNode\nTime\n2004-09-11 11:09:18,046\nThread\nThread-10\nMessage\nUnexpected exception. Closing connection.\nNDC\nnull\nClass\n\nMethod\n\nLine\n\nFile\n\nProperties\n{{log4jid,1}}\nThrowable\njava.lang.ClassNotFoundException: org.apache.log4j.spi.LocationInfo\n\tat com.sun.jnlp.JNLPClassLoader$1.run(Unknown Source)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat com.sun.jnlp.JNLPClassLoader.findClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClassInternal(Unknown Source)\n\tat java.lang.Class.forName0(Native Method)\n\tat java.lang.Class.forName(Unknown Source)\n\tat java.io.ObjectInputStream.resolveClass(Unknown Source)\n\tat java.io.ObjectInputStream.readNonProxyDesc(Unknown Source)\n\tat java.io.ObjectInputStream.readClassDesc(Unknown Source)\n\tat java.io.ObjectInputStream.readOrdinaryObject(Unknown Source)\n\tat java.io.ObjectInputStream.readObject0(Unknown Source)\n\tat java.io.ObjectInputStream.defaultReadFields(Unknown Source)\n\tat java.io.ObjectInputStream.defaultReadObject(Unknown Source)\n\tat org.apache.log4j.spi.LoggingEvent.readObject(LoggingEvent.java:848)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\n\tat java.lang.reflect.Method.invoke(Unknown Source)\n\tat java.io.ObjectStreamClass.invokeReadObject(Unknown Source)\n\tat java.io.ObjectInputStream.readSerialData(Unknown Source)\n\tat java.io.ObjectInputStream.readOrdinaryObject(Unknown Source)\n\tat java.io.ObjectInputStream.readObject0(Unknown Source)\n\tat java.io.ObjectInputStream.readObject(Unknown Source)\n\tat org.apache.log4j.net.SocketNode.run(SocketNode.java:134)\n\tat java.lang.Thread.run(Unknown Source)\n\nProperties file:\n----------------\n# Set root logger level to DEBUG and its appenders to stdout and R.\nlog4j.rootLogger=debug, stdout, R, Socket\n\nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender\nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout\n\n# Pattern to output the caller's file name and line number.\nlog4j.appender.stdout.layout.ConversionPattern=%5p [%t] (%c\\:%L) - %m%n\n\nlog4j.appender.R=org.apache.log4j.RollingFileAppender\nlog4j.appender.R.File=c:/spl_log4j.log\nlog4j.appender.R.MaxFileSize=512KB\nlog4j.appender.R.MaxBackupIndex=1\nlog4j.appender.R.layout=org.apache.log4j.PatternLayout\nlog4j.appender.R.layout.ConversionPattern=%p %t %c - %m%n\n\nlog4j.appender.Socket=org.apache.log4j.net.SocketAppender\nlog4j.appender.Socket.RemoteHost=localhost\nlog4j.appender.Socket.Port=4445\n\nTest class for debugging:\n-------------------------\npublic class test {\n\n\tpublic static void main( String[] args ) {\n\t\torg.apache.log4j.Logger.getLogger(\"test class\").debug(\"Testing \nlogging\");\n\t}\n}\n\n(Class being compiled & run with just log4j in the classpath)\n(log4j.properties is being read correctly)\n\nOutput in file that is logged (works as expected)\n-----------------------------\nDEBUG main test class - Testing logging"},
{"comment_id": "63403", "bug_id": "31178", "who": "Christian Ashby", "text": "See below for error, log4j.properties entries, etc.\n\nClassNotFoundException is thrown in chainsaw when trying to use a default \nSocketAppender and SimpleListener.\n\nChainsaw v2.0alpha loaded via WebStart on JDK 1.4.2 IE 6 Windows XP SP2, log4j \nversion 1.2.8\n\nTried reinstall of jdk, jvm and chainsaw\n\nException thrown:\n-----------------\nLevel\nERROR\nLogger\norg.apache.log4j.net.SocketNode\nTime\n2004-09-11 11:09:18,046\nThread\nThread-10\nMessage\nUnexpected exception. Closing connection.\nNDC\nnull\nClass\n\nMethod\n\nLine\n\nFile\n\nProperties\n{{log4jid,1}}\nThrowable\njava.lang.ClassNotFoundException: org.apache.log4j.spi.LocationInfo\n\tat com.sun.jnlp.JNLPClassLoader$1.run(Unknown Source)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat com.sun.jnlp.JNLPClassLoader.findClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClassInternal(Unknown Source)\n\tat java.lang.Class.forName0(Native Method)\n\tat java.lang.Class.forName(Unknown Source)\n\tat java.io.ObjectInputStream.resolveClass(Unknown Source)\n\tat java.io.ObjectInputStream.readNonProxyDesc(Unknown Source)\n\tat java.io.ObjectInputStream.readClassDesc(Unknown Source)\n\tat java.io.ObjectInputStream.readOrdinaryObject(Unknown Source)\n\tat java.io.ObjectInputStream.readObject0(Unknown Source)\n\tat java.io.ObjectInputStream.defaultReadFields(Unknown Source)\n\tat java.io.ObjectInputStream.defaultReadObject(Unknown Source)\n\tat org.apache.log4j.spi.LoggingEvent.readObject(LoggingEvent.java:848)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\n\tat java.lang.reflect.Method.invoke(Unknown Source)\n\tat java.io.ObjectStreamClass.invokeReadObject(Unknown Source)\n\tat java.io.ObjectInputStream.readSerialData(Unknown Source)\n\tat java.io.ObjectInputStream.readOrdinaryObject(Unknown Source)\n\tat java.io.ObjectInputStream.readObject0(Unknown Source)\n\tat java.io.ObjectInputStream.readObject(Unknown Source)\n\tat org.apache.log4j.net.SocketNode.run(SocketNode.java:134)\n\tat java.lang.Thread.run(Unknown Source)\n\nProperties file:\n----------------\n# Set root logger level to DEBUG and its appenders to stdout and R.\nlog4j.rootLogger=debug, stdout, R, Socket\n\nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender\nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout\n\n# Pattern to output the caller's file name and line number.\nlog4j.appender.stdout.layout.ConversionPattern=%5p [%t] (%c\\:%L) - %m%n\n\nlog4j.appender.R=org.apache.log4j.RollingFileAppender\nlog4j.appender.R.File=c:/spl_log4j.log\nlog4j.appender.R.MaxFileSize=512KB\nlog4j.appender.R.MaxBackupIndex=1\nlog4j.appender.R.layout=org.apache.log4j.PatternLayout\nlog4j.appender.R.layout.ConversionPattern=%p %t %c - %m%n\n\nlog4j.appender.Socket=org.apache.log4j.net.SocketAppender\nlog4j.appender.Socket.RemoteHost=localhost\nlog4j.appender.Socket.Port=4445\n\nTest class for debugging:\n-------------------------\npublic class test {\n\n\tpublic static void main( String[] args ) {\n\t\torg.apache.log4j.Logger.getLogger(\"test class\").debug(\"Testing \nlogging\");\n\t}\n}\n\n(Class being compiled & run with just log4j in the classpath)\n(log4j.properties is being read correctly)\n\nOutput in file that is logged (works as expected)\n-----------------------------\nDEBUG main test class - Testing logging"},
{"comment_id": "63403", "bug_id": "31178", "who": "Christian Ashby", "text": "See below for error, log4j.properties entries, etc.\n\nClassNotFoundException is thrown in chainsaw when trying to use a default \nSocketAppender and SimpleListener.\n\nChainsaw v2.0alpha loaded via WebStart on JDK 1.4.2 IE 6 Windows XP SP2, log4j \nversion 1.2.8\n\nTried reinstall of jdk, jvm and chainsaw\n\nException thrown:\n-----------------\nLevel\nERROR\nLogger\norg.apache.log4j.net.SocketNode\nTime\n2004-09-11 11:09:18,046\nThread\nThread-10\nMessage\nUnexpected exception. Closing connection.\nNDC\nnull\nClass\n\nMethod\n\nLine\n\nFile\n\nProperties\n{{log4jid,1}}\nThrowable\njava.lang.ClassNotFoundException: org.apache.log4j.spi.LocationInfo\n\tat com.sun.jnlp.JNLPClassLoader$1.run(Unknown Source)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat com.sun.jnlp.JNLPClassLoader.findClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClassInternal(Unknown Source)\n\tat java.lang.Class.forName0(Native Method)\n\tat java.lang.Class.forName(Unknown Source)\n\tat java.io.ObjectInputStream.resolveClass(Unknown Source)\n\tat java.io.ObjectInputStream.readNonProxyDesc(Unknown Source)\n\tat java.io.ObjectInputStream.readClassDesc(Unknown Source)\n\tat java.io.ObjectInputStream.readOrdinaryObject(Unknown Source)\n\tat java.io.ObjectInputStream.readObject0(Unknown Source)\n\tat java.io.ObjectInputStream.defaultReadFields(Unknown Source)\n\tat java.io.ObjectInputStream.defaultReadObject(Unknown Source)\n\tat org.apache.log4j.spi.LoggingEvent.readObject(LoggingEvent.java:848)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\n\tat java.lang.reflect.Method.invoke(Unknown Source)\n\tat java.io.ObjectStreamClass.invokeReadObject(Unknown Source)\n\tat java.io.ObjectInputStream.readSerialData(Unknown Source)\n\tat java.io.ObjectInputStream.readOrdinaryObject(Unknown Source)\n\tat java.io.ObjectInputStream.readObject0(Unknown Source)\n\tat java.io.ObjectInputStream.readObject(Unknown Source)\n\tat org.apache.log4j.net.SocketNode.run(SocketNode.java:134)\n\tat java.lang.Thread.run(Unknown Source)\n\nProperties file:\n----------------\n# Set root logger level to DEBUG and its appenders to stdout and R.\nlog4j.rootLogger=debug, stdout, R, Socket\n\nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender\nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout\n\n# Pattern to output the caller's file name and line number.\nlog4j.appender.stdout.layout.ConversionPattern=%5p [%t] (%c\\:%L) - %m%n\n\nlog4j.appender.R=org.apache.log4j.RollingFileAppender\nlog4j.appender.R.File=c:/spl_log4j.log\nlog4j.appender.R.MaxFileSize=512KB\nlog4j.appender.R.MaxBackupIndex=1\nlog4j.appender.R.layout=org.apache.log4j.PatternLayout\nlog4j.appender.R.layout.ConversionPattern=%p %t %c - %m%n\n\nlog4j.appender.Socket=org.apache.log4j.net.SocketAppender\nlog4j.appender.Socket.RemoteHost=localhost\nlog4j.appender.Socket.Port=4445\n\nTest class for debugging:\n-------------------------\npublic class test {\n\n\tpublic static void main( String[] args ) {\n\t\torg.apache.log4j.Logger.getLogger(\"test class\").debug(\"Testing \nlogging\");\n\t}\n}\n\n(Class being compiled & run with just log4j in the classpath)\n(log4j.properties is being read correctly)\n\nOutput in file that is logged (works as expected)\n-----------------------------\nDEBUG main test class - Testing logging"},
{"comment_id": "63403", "bug_id": "31178", "who": "Christian Ashby", "text": "See below for error, log4j.properties entries, etc.\n\nClassNotFoundException is thrown in chainsaw when trying to use a default \nSocketAppender and SimpleListener.\n\nChainsaw v2.0alpha loaded via WebStart on JDK 1.4.2 IE 6 Windows XP SP2, log4j \nversion 1.2.8\n\nTried reinstall of jdk, jvm and chainsaw\n\nException thrown:\n-----------------\nLevel\nERROR\nLogger\norg.apache.log4j.net.SocketNode\nTime\n2004-09-11 11:09:18,046\nThread\nThread-10\nMessage\nUnexpected exception. Closing connection.\nNDC\nnull\nClass\n\nMethod\n\nLine\n\nFile\n\nProperties\n{{log4jid,1}}\nThrowable\njava.lang.ClassNotFoundException: org.apache.log4j.spi.LocationInfo\n\tat com.sun.jnlp.JNLPClassLoader$1.run(Unknown Source)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat com.sun.jnlp.JNLPClassLoader.findClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClassInternal(Unknown Source)\n\tat java.lang.Class.forName0(Native Method)\n\tat java.lang.Class.forName(Unknown Source)\n\tat java.io.ObjectInputStream.resolveClass(Unknown Source)\n\tat java.io.ObjectInputStream.readNonProxyDesc(Unknown Source)\n\tat java.io.ObjectInputStream.readClassDesc(Unknown Source)\n\tat java.io.ObjectInputStream.readOrdinaryObject(Unknown Source)\n\tat java.io.ObjectInputStream.readObject0(Unknown Source)\n\tat java.io.ObjectInputStream.defaultReadFields(Unknown Source)\n\tat java.io.ObjectInputStream.defaultReadObject(Unknown Source)\n\tat org.apache.log4j.spi.LoggingEvent.readObject(LoggingEvent.java:848)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\n\tat java.lang.reflect.Method.invoke(Unknown Source)\n\tat java.io.ObjectStreamClass.invokeReadObject(Unknown Source)\n\tat java.io.ObjectInputStream.readSerialData(Unknown Source)\n\tat java.io.ObjectInputStream.readOrdinaryObject(Unknown Source)\n\tat java.io.ObjectInputStream.readObject0(Unknown Source)\n\tat java.io.ObjectInputStream.readObject(Unknown Source)\n\tat org.apache.log4j.net.SocketNode.run(SocketNode.java:134)\n\tat java.lang.Thread.run(Unknown Source)\n\nProperties file:\n----------------\n# Set root logger level to DEBUG and its appenders to stdout and R.\nlog4j.rootLogger=debug, stdout, R, Socket\n\nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender\nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout\n\n# Pattern to output the caller's file name and line number.\nlog4j.appender.stdout.layout.ConversionPattern=%5p [%t] (%c\\:%L) - %m%n\n\nlog4j.appender.R=org.apache.log4j.RollingFileAppender\nlog4j.appender.R.File=c:/spl_log4j.log\nlog4j.appender.R.MaxFileSize=512KB\nlog4j.appender.R.MaxBackupIndex=1\nlog4j.appender.R.layout=org.apache.log4j.PatternLayout\nlog4j.appender.R.layout.ConversionPattern=%p %t %c - %m%n\n\nlog4j.appender.Socket=org.apache.log4j.net.SocketAppender\nlog4j.appender.Socket.RemoteHost=localhost\nlog4j.appender.Socket.Port=4445\n\nTest class for debugging:\n-------------------------\npublic class test {\n\n\tpublic static void main( String[] args ) {\n\t\torg.apache.log4j.Logger.getLogger(\"test class\").debug(\"Testing \nlogging\");\n\t}\n}\n\n(Class being compiled & run with just log4j in the classpath)\n(log4j.properties is being read correctly)\n\nOutput in file that is logged (works as expected)\n-----------------------------\nDEBUG main test class - Testing logging"},
{"comment_id": "63403", "bug_id": "31178", "who": "Christian Ashby", "text": "See below for error, log4j.properties entries, etc.\n\nClassNotFoundException is thrown in chainsaw when trying to use a default \nSocketAppender and SimpleListener.\n\nChainsaw v2.0alpha loaded via WebStart on JDK 1.4.2 IE 6 Windows XP SP2, log4j \nversion 1.2.8\n\nTried reinstall of jdk, jvm and chainsaw\n\nException thrown:\n-----------------\nLevel\nERROR\nLogger\norg.apache.log4j.net.SocketNode\nTime\n2004-09-11 11:09:18,046\nThread\nThread-10\nMessage\nUnexpected exception. Closing connection.\nNDC\nnull\nClass\n\nMethod\n\nLine\n\nFile\n\nProperties\n{{log4jid,1}}\nThrowable\njava.lang.ClassNotFoundException: org.apache.log4j.spi.LocationInfo\n\tat com.sun.jnlp.JNLPClassLoader$1.run(Unknown Source)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat com.sun.jnlp.JNLPClassLoader.findClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClassInternal(Unknown Source)\n\tat java.lang.Class.forName0(Native Method)\n\tat java.lang.Class.forName(Unknown Source)\n\tat java.io.ObjectInputStream.resolveClass(Unknown Source)\n\tat java.io.ObjectInputStream.readNonProxyDesc(Unknown Source)\n\tat java.io.ObjectInputStream.readClassDesc(Unknown Source)\n\tat java.io.ObjectInputStream.readOrdinaryObject(Unknown Source)\n\tat java.io.ObjectInputStream.readObject0(Unknown Source)\n\tat java.io.ObjectInputStream.defaultReadFields(Unknown Source)\n\tat java.io.ObjectInputStream.defaultReadObject(Unknown Source)\n\tat org.apache.log4j.spi.LoggingEvent.readObject(LoggingEvent.java:848)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\n\tat java.lang.reflect.Method.invoke(Unknown Source)\n\tat java.io.ObjectStreamClass.invokeReadObject(Unknown Source)\n\tat java.io.ObjectInputStream.readSerialData(Unknown Source)\n\tat java.io.ObjectInputStream.readOrdinaryObject(Unknown Source)\n\tat java.io.ObjectInputStream.readObject0(Unknown Source)\n\tat java.io.ObjectInputStream.readObject(Unknown Source)\n\tat org.apache.log4j.net.SocketNode.run(SocketNode.java:134)\n\tat java.lang.Thread.run(Unknown Source)\n\nProperties file:\n----------------\n# Set root logger level to DEBUG and its appenders to stdout and R.\nlog4j.rootLogger=debug, stdout, R, Socket\n\nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender\nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout\n\n# Pattern to output the caller's file name and line number.\nlog4j.appender.stdout.layout.ConversionPattern=%5p [%t] (%c\\:%L) - %m%n\n\nlog4j.appender.R=org.apache.log4j.RollingFileAppender\nlog4j.appender.R.File=c:/spl_log4j.log\nlog4j.appender.R.MaxFileSize=512KB\nlog4j.appender.R.MaxBackupIndex=1\nlog4j.appender.R.layout=org.apache.log4j.PatternLayout\nlog4j.appender.R.layout.ConversionPattern=%p %t %c - %m%n\n\nlog4j.appender.Socket=org.apache.log4j.net.SocketAppender\nlog4j.appender.Socket.RemoteHost=localhost\nlog4j.appender.Socket.Port=4445\n\nTest class for debugging:\n-------------------------\npublic class test {\n\n\tpublic static void main( String[] args ) {\n\t\torg.apache.log4j.Logger.getLogger(\"test class\").debug(\"Testing \nlogging\");\n\t}\n}\n\n(Class being compiled & run with just log4j in the classpath)\n(log4j.properties is being read correctly)\n\nOutput in file that is logged (works as expected)\n-----------------------------\nDEBUG main test class - Testing logging"},
{"comment_id": "109969", "bug_id": "43736", "who": "Curt Arnold", "text": "On Oct 30, 2007, at 2:16 PM on log4j-user, Jessica Lin wrote:\n\nI want to use Chainsaw to view the log file contains Chinese character. The log file was recorded by \nusing FileAppender which I defined the endoding as \u201cUTF-8\u201d. Here is part of my log4j.properties file.\n\n\n# xml format file appender\nlog4j.appender.xml=org.apache.log4j.FileAppender\nlog4j.appender.xml.file=xml.log\nlog4j.appender.xml.encoding=UTF-8\nlog4j.appender.xml.append=false\nlog4j.appender.xml.layout=org.apache.log4j.xml.XMLLayout\n\nThen  I use Chainsaw to load \u201cxml.log\u201d file. The Chinese characters are shown as \u201c \u00e5\u0160 \u00e8\u00bf\u2122\u00e4\u00b8\u00aa\u00e5\u0160\u0178\u00e8\u0192\u00bd\u201d. \nThe Original characters are \u201c?????\u201d. \n\nI double checked the \u201cxml.log\u201d which did save as UTF-8 encoding. The XMLDecoder file Which \nChainsaw uses to load XML file also use UTF-8 encoding.\n\nCan you help me?\n\nThanks,\n\nJessica\n\n\n---------\n\nThe problem appears to be in o.a.l.xml.XMLDecoder in the receivers companion where at line 186 and \n188, InputStreamReaders are allocated without explicitly specifying an encoding.  That will cause the \nInputStreamReader to use the default platform encoding which appears not be to UTF-8 in this \ninstance.\n\nThe approach is broken and needs to be rewritten to handle any arbitrary encoding.  The XML parser \nshould be presented with a minimal document like:\n\n<!DOCTYPE log4j:eventSet [\n<!ENTITY content SYSTEM \"...\">\n]>\n<log4j:eventSet version=\"1.2\" xmlns:log4j=\"...\">\n    &content;\n</log4:eventSet>\n\nand an entity resolver should then load the URL as a byte stream in response to the resolveEntity call. \n\nFor a work around, anything that sets the default charset for the JVM to UTF-8 should avoid the \nproblem until it can be fixed.  There is not a clearly documented way to do that and it is platform \ndependent.  On a Nix machine, you could try\n\nexport LC_CTYPE=UTF-8\n\non Windows you could try:\n\njava -Dfile.encoding=UTF-8 org.apache.log4j.chainsaw..."},
{"comment_id": "109969", "bug_id": "43736", "who": "Curt Arnold", "text": "On Oct 30, 2007, at 2:16 PM on log4j-user, Jessica Lin wrote:\n\nI want to use Chainsaw to view the log file contains Chinese character. The log file was recorded by \nusing FileAppender which I defined the endoding as \u201cUTF-8\u201d. Here is part of my log4j.properties file.\n\n\n# xml format file appender\nlog4j.appender.xml=org.apache.log4j.FileAppender\nlog4j.appender.xml.file=xml.log\nlog4j.appender.xml.encoding=UTF-8\nlog4j.appender.xml.append=false\nlog4j.appender.xml.layout=org.apache.log4j.xml.XMLLayout\n\nThen  I use Chainsaw to load \u201cxml.log\u201d file. The Chinese characters are shown as \u201c \u00e5\u0160 \u00e8\u00bf\u2122\u00e4\u00b8\u00aa\u00e5\u0160\u0178\u00e8\u0192\u00bd\u201d. \nThe Original characters are \u201c?????\u201d. \n\nI double checked the \u201cxml.log\u201d which did save as UTF-8 encoding. The XMLDecoder file Which \nChainsaw uses to load XML file also use UTF-8 encoding.\n\nCan you help me?\n\nThanks,\n\nJessica\n\n\n---------\n\nThe problem appears to be in o.a.l.xml.XMLDecoder in the receivers companion where at line 186 and \n188, InputStreamReaders are allocated without explicitly specifying an encoding.  That will cause the \nInputStreamReader to use the default platform encoding which appears not be to UTF-8 in this \ninstance.\n\nThe approach is broken and needs to be rewritten to handle any arbitrary encoding.  The XML parser \nshould be presented with a minimal document like:\n\n<!DOCTYPE log4j:eventSet [\n<!ENTITY content SYSTEM \"...\">\n]>\n<log4j:eventSet version=\"1.2\" xmlns:log4j=\"...\">\n    &content;\n</log4:eventSet>\n\nand an entity resolver should then load the URL as a byte stream in response to the resolveEntity call. \n\nFor a work around, anything that sets the default charset for the JVM to UTF-8 should avoid the \nproblem until it can be fixed.  There is not a clearly documented way to do that and it is platform \ndependent.  On a Nix machine, you could try\n\nexport LC_CTYPE=UTF-8\n\non Windows you could try:\n\njava -Dfile.encoding=UTF-8 org.apache.log4j.chainsaw..."},
{"comment_id": "109969", "bug_id": "43736", "who": "Curt Arnold", "text": "On Oct 30, 2007, at 2:16 PM on log4j-user, Jessica Lin wrote:\n\nI want to use Chainsaw to view the log file contains Chinese character. The log file was recorded by \nusing FileAppender which I defined the endoding as \u201cUTF-8\u201d. Here is part of my log4j.properties file.\n\n\n# xml format file appender\nlog4j.appender.xml=org.apache.log4j.FileAppender\nlog4j.appender.xml.file=xml.log\nlog4j.appender.xml.encoding=UTF-8\nlog4j.appender.xml.append=false\nlog4j.appender.xml.layout=org.apache.log4j.xml.XMLLayout\n\nThen  I use Chainsaw to load \u201cxml.log\u201d file. The Chinese characters are shown as \u201c \u00e5\u0160 \u00e8\u00bf\u2122\u00e4\u00b8\u00aa\u00e5\u0160\u0178\u00e8\u0192\u00bd\u201d. \nThe Original characters are \u201c?????\u201d. \n\nI double checked the \u201cxml.log\u201d which did save as UTF-8 encoding. The XMLDecoder file Which \nChainsaw uses to load XML file also use UTF-8 encoding.\n\nCan you help me?\n\nThanks,\n\nJessica\n\n\n---------\n\nThe problem appears to be in o.a.l.xml.XMLDecoder in the receivers companion where at line 186 and \n188, InputStreamReaders are allocated without explicitly specifying an encoding.  That will cause the \nInputStreamReader to use the default platform encoding which appears not be to UTF-8 in this \ninstance.\n\nThe approach is broken and needs to be rewritten to handle any arbitrary encoding.  The XML parser \nshould be presented with a minimal document like:\n\n<!DOCTYPE log4j:eventSet [\n<!ENTITY content SYSTEM \"...\">\n]>\n<log4j:eventSet version=\"1.2\" xmlns:log4j=\"...\">\n    &content;\n</log4:eventSet>\n\nand an entity resolver should then load the URL as a byte stream in response to the resolveEntity call. \n\nFor a work around, anything that sets the default charset for the JVM to UTF-8 should avoid the \nproblem until it can be fixed.  There is not a clearly documented way to do that and it is platform \ndependent.  On a Nix machine, you could try\n\nexport LC_CTYPE=UTF-8\n\non Windows you could try:\n\njava -Dfile.encoding=UTF-8 org.apache.log4j.chainsaw..."},
{"comment_id": "109969", "bug_id": "43736", "who": "Curt Arnold", "text": "On Oct 30, 2007, at 2:16 PM on log4j-user, Jessica Lin wrote:\n\nI want to use Chainsaw to view the log file contains Chinese character. The log file was recorded by \nusing FileAppender which I defined the endoding as \u201cUTF-8\u201d. Here is part of my log4j.properties file.\n\n\n# xml format file appender\nlog4j.appender.xml=org.apache.log4j.FileAppender\nlog4j.appender.xml.file=xml.log\nlog4j.appender.xml.encoding=UTF-8\nlog4j.appender.xml.append=false\nlog4j.appender.xml.layout=org.apache.log4j.xml.XMLLayout\n\nThen  I use Chainsaw to load \u201cxml.log\u201d file. The Chinese characters are shown as \u201c \u00e5\u0160 \u00e8\u00bf\u2122\u00e4\u00b8\u00aa\u00e5\u0160\u0178\u00e8\u0192\u00bd\u201d. \nThe Original characters are \u201c?????\u201d. \n\nI double checked the \u201cxml.log\u201d which did save as UTF-8 encoding. The XMLDecoder file Which \nChainsaw uses to load XML file also use UTF-8 encoding.\n\nCan you help me?\n\nThanks,\n\nJessica\n\n\n---------\n\nThe problem appears to be in o.a.l.xml.XMLDecoder in the receivers companion where at line 186 and \n188, InputStreamReaders are allocated without explicitly specifying an encoding.  That will cause the \nInputStreamReader to use the default platform encoding which appears not be to UTF-8 in this \ninstance.\n\nThe approach is broken and needs to be rewritten to handle any arbitrary encoding.  The XML parser \nshould be presented with a minimal document like:\n\n<!DOCTYPE log4j:eventSet [\n<!ENTITY content SYSTEM \"...\">\n]>\n<log4j:eventSet version=\"1.2\" xmlns:log4j=\"...\">\n    &content;\n</log4:eventSet>\n\nand an entity resolver should then load the URL as a byte stream in response to the resolveEntity call. \n\nFor a work around, anything that sets the default charset for the JVM to UTF-8 should avoid the \nproblem until it can be fixed.  There is not a clearly documented way to do that and it is platform \ndependent.  On a Nix machine, you could try\n\nexport LC_CTYPE=UTF-8\n\non Windows you could try:\n\njava -Dfile.encoding=UTF-8 org.apache.log4j.chainsaw..."},
{"comment_id": "109969", "bug_id": "43736", "who": "Curt Arnold", "text": "On Oct 30, 2007, at 2:16 PM on log4j-user, Jessica Lin wrote:\n\nI want to use Chainsaw to view the log file contains Chinese character. The log file was recorded by \nusing FileAppender which I defined the endoding as \u201cUTF-8\u201d. Here is part of my log4j.properties file.\n\n\n# xml format file appender\nlog4j.appender.xml=org.apache.log4j.FileAppender\nlog4j.appender.xml.file=xml.log\nlog4j.appender.xml.encoding=UTF-8\nlog4j.appender.xml.append=false\nlog4j.appender.xml.layout=org.apache.log4j.xml.XMLLayout\n\nThen  I use Chainsaw to load \u201cxml.log\u201d file. The Chinese characters are shown as \u201c \u00e5\u0160 \u00e8\u00bf\u2122\u00e4\u00b8\u00aa\u00e5\u0160\u0178\u00e8\u0192\u00bd\u201d. \nThe Original characters are \u201c?????\u201d. \n\nI double checked the \u201cxml.log\u201d which did save as UTF-8 encoding. The XMLDecoder file Which \nChainsaw uses to load XML file also use UTF-8 encoding.\n\nCan you help me?\n\nThanks,\n\nJessica\n\n\n---------\n\nThe problem appears to be in o.a.l.xml.XMLDecoder in the receivers companion where at line 186 and \n188, InputStreamReaders are allocated without explicitly specifying an encoding.  That will cause the \nInputStreamReader to use the default platform encoding which appears not be to UTF-8 in this \ninstance.\n\nThe approach is broken and needs to be rewritten to handle any arbitrary encoding.  The XML parser \nshould be presented with a minimal document like:\n\n<!DOCTYPE log4j:eventSet [\n<!ENTITY content SYSTEM \"...\">\n]>\n<log4j:eventSet version=\"1.2\" xmlns:log4j=\"...\">\n    &content;\n</log4:eventSet>\n\nand an entity resolver should then load the URL as a byte stream in response to the resolveEntity call. \n\nFor a work around, anything that sets the default charset for the JVM to UTF-8 should avoid the \nproblem until it can be fixed.  There is not a clearly documented way to do that and it is platform \ndependent.  On a Nix machine, you could try\n\nexport LC_CTYPE=UTF-8\n\non Windows you could try:\n\njava -Dfile.encoding=UTF-8 org.apache.log4j.chainsaw..."},
{"comment_id": "109969", "bug_id": "43736", "who": "Curt Arnold", "text": "On Oct 30, 2007, at 2:16 PM on log4j-user, Jessica Lin wrote:\n\nI want to use Chainsaw to view the log file contains Chinese character. The log file was recorded by \nusing FileAppender which I defined the endoding as \u201cUTF-8\u201d. Here is part of my log4j.properties file.\n\n\n# xml format file appender\nlog4j.appender.xml=org.apache.log4j.FileAppender\nlog4j.appender.xml.file=xml.log\nlog4j.appender.xml.encoding=UTF-8\nlog4j.appender.xml.append=false\nlog4j.appender.xml.layout=org.apache.log4j.xml.XMLLayout\n\nThen  I use Chainsaw to load \u201cxml.log\u201d file. The Chinese characters are shown as \u201c \u00e5\u0160 \u00e8\u00bf\u2122\u00e4\u00b8\u00aa\u00e5\u0160\u0178\u00e8\u0192\u00bd\u201d. \nThe Original characters are \u201c?????\u201d. \n\nI double checked the \u201cxml.log\u201d which did save as UTF-8 encoding. The XMLDecoder file Which \nChainsaw uses to load XML file also use UTF-8 encoding.\n\nCan you help me?\n\nThanks,\n\nJessica\n\n\n---------\n\nThe problem appears to be in o.a.l.xml.XMLDecoder in the receivers companion where at line 186 and \n188, InputStreamReaders are allocated without explicitly specifying an encoding.  That will cause the \nInputStreamReader to use the default platform encoding which appears not be to UTF-8 in this \ninstance.\n\nThe approach is broken and needs to be rewritten to handle any arbitrary encoding.  The XML parser \nshould be presented with a minimal document like:\n\n<!DOCTYPE log4j:eventSet [\n<!ENTITY content SYSTEM \"...\">\n]>\n<log4j:eventSet version=\"1.2\" xmlns:log4j=\"...\">\n    &content;\n</log4:eventSet>\n\nand an entity resolver should then load the URL as a byte stream in response to the resolveEntity call. \n\nFor a work around, anything that sets the default charset for the JVM to UTF-8 should avoid the \nproblem until it can be fixed.  There is not a clearly documented way to do that and it is platform \ndependent.  On a Nix machine, you could try\n\nexport LC_CTYPE=UTF-8\n\non Windows you could try:\n\njava -Dfile.encoding=UTF-8 org.apache.log4j.chainsaw..."},
{"comment_id": "109969", "bug_id": "43736", "who": "Curt Arnold", "text": "On Oct 30, 2007, at 2:16 PM on log4j-user, Jessica Lin wrote:\n\nI want to use Chainsaw to view the log file contains Chinese character. The log file was recorded by \nusing FileAppender which I defined the endoding as \u201cUTF-8\u201d. Here is part of my log4j.properties file.\n\n\n# xml format file appender\nlog4j.appender.xml=org.apache.log4j.FileAppender\nlog4j.appender.xml.file=xml.log\nlog4j.appender.xml.encoding=UTF-8\nlog4j.appender.xml.append=false\nlog4j.appender.xml.layout=org.apache.log4j.xml.XMLLayout\n\nThen  I use Chainsaw to load \u201cxml.log\u201d file. The Chinese characters are shown as \u201c \u00e5\u0160 \u00e8\u00bf\u2122\u00e4\u00b8\u00aa\u00e5\u0160\u0178\u00e8\u0192\u00bd\u201d. \nThe Original characters are \u201c?????\u201d. \n\nI double checked the \u201cxml.log\u201d which did save as UTF-8 encoding. The XMLDecoder file Which \nChainsaw uses to load XML file also use UTF-8 encoding.\n\nCan you help me?\n\nThanks,\n\nJessica\n\n\n---------\n\nThe problem appears to be in o.a.l.xml.XMLDecoder in the receivers companion where at line 186 and \n188, InputStreamReaders are allocated without explicitly specifying an encoding.  That will cause the \nInputStreamReader to use the default platform encoding which appears not be to UTF-8 in this \ninstance.\n\nThe approach is broken and needs to be rewritten to handle any arbitrary encoding.  The XML parser \nshould be presented with a minimal document like:\n\n<!DOCTYPE log4j:eventSet [\n<!ENTITY content SYSTEM \"...\">\n]>\n<log4j:eventSet version=\"1.2\" xmlns:log4j=\"...\">\n    &content;\n</log4:eventSet>\n\nand an entity resolver should then load the URL as a byte stream in response to the resolveEntity call. \n\nFor a work around, anything that sets the default charset for the JVM to UTF-8 should avoid the \nproblem until it can be fixed.  There is not a clearly documented way to do that and it is platform \ndependent.  On a Nix machine, you could try\n\nexport LC_CTYPE=UTF-8\n\non Windows you could try:\n\njava -Dfile.encoding=UTF-8 org.apache.log4j.chainsaw..."},
{"comment_id": "63403", "bug_id": "31178", "who": "Christian Ashby", "text": "See below for error, log4j.properties entries, etc.\n\nClassNotFoundException is thrown in chainsaw when trying to use a default \nSocketAppender and SimpleListener.\n\nChainsaw v2.0alpha loaded via WebStart on JDK 1.4.2 IE 6 Windows XP SP2, log4j \nversion 1.2.8\n\nTried reinstall of jdk, jvm and chainsaw\n\nException thrown:\n-----------------\nLevel\nERROR\nLogger\norg.apache.log4j.net.SocketNode\nTime\n2004-09-11 11:09:18,046\nThread\nThread-10\nMessage\nUnexpected exception. Closing connection.\nNDC\nnull\nClass\n\nMethod\n\nLine\n\nFile\n\nProperties\n{{log4jid,1}}\nThrowable\njava.lang.ClassNotFoundException: org.apache.log4j.spi.LocationInfo\n\tat com.sun.jnlp.JNLPClassLoader$1.run(Unknown Source)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat com.sun.jnlp.JNLPClassLoader.findClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClassInternal(Unknown Source)\n\tat java.lang.Class.forName0(Native Method)\n\tat java.lang.Class.forName(Unknown Source)\n\tat java.io.ObjectInputStream.resolveClass(Unknown Source)\n\tat java.io.ObjectInputStream.readNonProxyDesc(Unknown Source)\n\tat java.io.ObjectInputStream.readClassDesc(Unknown Source)\n\tat java.io.ObjectInputStream.readOrdinaryObject(Unknown Source)\n\tat java.io.ObjectInputStream.readObject0(Unknown Source)\n\tat java.io.ObjectInputStream.defaultReadFields(Unknown Source)\n\tat java.io.ObjectInputStream.defaultReadObject(Unknown Source)\n\tat org.apache.log4j.spi.LoggingEvent.readObject(LoggingEvent.java:848)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\n\tat java.lang.reflect.Method.invoke(Unknown Source)\n\tat java.io.ObjectStreamClass.invokeReadObject(Unknown Source)\n\tat java.io.ObjectInputStream.readSerialData(Unknown Source)\n\tat java.io.ObjectInputStream.readOrdinaryObject(Unknown Source)\n\tat java.io.ObjectInputStream.readObject0(Unknown Source)\n\tat java.io.ObjectInputStream.readObject(Unknown Source)\n\tat org.apache.log4j.net.SocketNode.run(SocketNode.java:134)\n\tat java.lang.Thread.run(Unknown Source)\n\nProperties file:\n----------------\n# Set root logger level to DEBUG and its appenders to stdout and R.\nlog4j.rootLogger=debug, stdout, R, Socket\n\nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender\nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout\n\n# Pattern to output the caller's file name and line number.\nlog4j.appender.stdout.layout.ConversionPattern=%5p [%t] (%c\\:%L) - %m%n\n\nlog4j.appender.R=org.apache.log4j.RollingFileAppender\nlog4j.appender.R.File=c:/spl_log4j.log\nlog4j.appender.R.MaxFileSize=512KB\nlog4j.appender.R.MaxBackupIndex=1\nlog4j.appender.R.layout=org.apache.log4j.PatternLayout\nlog4j.appender.R.layout.ConversionPattern=%p %t %c - %m%n\n\nlog4j.appender.Socket=org.apache.log4j.net.SocketAppender\nlog4j.appender.Socket.RemoteHost=localhost\nlog4j.appender.Socket.Port=4445\n\nTest class for debugging:\n-------------------------\npublic class test {\n\n\tpublic static void main( String[] args ) {\n\t\torg.apache.log4j.Logger.getLogger(\"test class\").debug(\"Testing \nlogging\");\n\t}\n}\n\n(Class being compiled & run with just log4j in the classpath)\n(log4j.properties is being read correctly)\n\nOutput in file that is logged (works as expected)\n-----------------------------\nDEBUG main test class - Testing logging"},
{"comment_id": "63403", "bug_id": "31178", "who": "Christian Ashby", "text": "See below for error, log4j.properties entries, etc.\n\nClassNotFoundException is thrown in chainsaw when trying to use a default \nSocketAppender and SimpleListener.\n\nChainsaw v2.0alpha loaded via WebStart on JDK 1.4.2 IE 6 Windows XP SP2, log4j \nversion 1.2.8\n\nTried reinstall of jdk, jvm and chainsaw\n\nException thrown:\n-----------------\nLevel\nERROR\nLogger\norg.apache.log4j.net.SocketNode\nTime\n2004-09-11 11:09:18,046\nThread\nThread-10\nMessage\nUnexpected exception. Closing connection.\nNDC\nnull\nClass\n\nMethod\n\nLine\n\nFile\n\nProperties\n{{log4jid,1}}\nThrowable\njava.lang.ClassNotFoundException: org.apache.log4j.spi.LocationInfo\n\tat com.sun.jnlp.JNLPClassLoader$1.run(Unknown Source)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat com.sun.jnlp.JNLPClassLoader.findClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClassInternal(Unknown Source)\n\tat java.lang.Class.forName0(Native Method)\n\tat java.lang.Class.forName(Unknown Source)\n\tat java.io.ObjectInputStream.resolveClass(Unknown Source)\n\tat java.io.ObjectInputStream.readNonProxyDesc(Unknown Source)\n\tat java.io.ObjectInputStream.readClassDesc(Unknown Source)\n\tat java.io.ObjectInputStream.readOrdinaryObject(Unknown Source)\n\tat java.io.ObjectInputStream.readObject0(Unknown Source)\n\tat java.io.ObjectInputStream.defaultReadFields(Unknown Source)\n\tat java.io.ObjectInputStream.defaultReadObject(Unknown Source)\n\tat org.apache.log4j.spi.LoggingEvent.readObject(LoggingEvent.java:848)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\n\tat java.lang.reflect.Method.invoke(Unknown Source)\n\tat java.io.ObjectStreamClass.invokeReadObject(Unknown Source)\n\tat java.io.ObjectInputStream.readSerialData(Unknown Source)\n\tat java.io.ObjectInputStream.readOrdinaryObject(Unknown Source)\n\tat java.io.ObjectInputStream.readObject0(Unknown Source)\n\tat java.io.ObjectInputStream.readObject(Unknown Source)\n\tat org.apache.log4j.net.SocketNode.run(SocketNode.java:134)\n\tat java.lang.Thread.run(Unknown Source)\n\nProperties file:\n----------------\n# Set root logger level to DEBUG and its appenders to stdout and R.\nlog4j.rootLogger=debug, stdout, R, Socket\n\nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender\nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout\n\n# Pattern to output the caller's file name and line number.\nlog4j.appender.stdout.layout.ConversionPattern=%5p [%t] (%c\\:%L) - %m%n\n\nlog4j.appender.R=org.apache.log4j.RollingFileAppender\nlog4j.appender.R.File=c:/spl_log4j.log\nlog4j.appender.R.MaxFileSize=512KB\nlog4j.appender.R.MaxBackupIndex=1\nlog4j.appender.R.layout=org.apache.log4j.PatternLayout\nlog4j.appender.R.layout.ConversionPattern=%p %t %c - %m%n\n\nlog4j.appender.Socket=org.apache.log4j.net.SocketAppender\nlog4j.appender.Socket.RemoteHost=localhost\nlog4j.appender.Socket.Port=4445\n\nTest class for debugging:\n-------------------------\npublic class test {\n\n\tpublic static void main( String[] args ) {\n\t\torg.apache.log4j.Logger.getLogger(\"test class\").debug(\"Testing \nlogging\");\n\t}\n}\n\n(Class being compiled & run with just log4j in the classpath)\n(log4j.properties is being read correctly)\n\nOutput in file that is logged (works as expected)\n-----------------------------\nDEBUG main test class - Testing logging"},
{"comment_id": "63403", "bug_id": "31178", "who": "Christian Ashby", "text": "See below for error, log4j.properties entries, etc.\n\nClassNotFoundException is thrown in chainsaw when trying to use a default \nSocketAppender and SimpleListener.\n\nChainsaw v2.0alpha loaded via WebStart on JDK 1.4.2 IE 6 Windows XP SP2, log4j \nversion 1.2.8\n\nTried reinstall of jdk, jvm and chainsaw\n\nException thrown:\n-----------------\nLevel\nERROR\nLogger\norg.apache.log4j.net.SocketNode\nTime\n2004-09-11 11:09:18,046\nThread\nThread-10\nMessage\nUnexpected exception. Closing connection.\nNDC\nnull\nClass\n\nMethod\n\nLine\n\nFile\n\nProperties\n{{log4jid,1}}\nThrowable\njava.lang.ClassNotFoundException: org.apache.log4j.spi.LocationInfo\n\tat com.sun.jnlp.JNLPClassLoader$1.run(Unknown Source)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat com.sun.jnlp.JNLPClassLoader.findClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClassInternal(Unknown Source)\n\tat java.lang.Class.forName0(Native Method)\n\tat java.lang.Class.forName(Unknown Source)\n\tat java.io.ObjectInputStream.resolveClass(Unknown Source)\n\tat java.io.ObjectInputStream.readNonProxyDesc(Unknown Source)\n\tat java.io.ObjectInputStream.readClassDesc(Unknown Source)\n\tat java.io.ObjectInputStream.readOrdinaryObject(Unknown Source)\n\tat java.io.ObjectInputStream.readObject0(Unknown Source)\n\tat java.io.ObjectInputStream.defaultReadFields(Unknown Source)\n\tat java.io.ObjectInputStream.defaultReadObject(Unknown Source)\n\tat org.apache.log4j.spi.LoggingEvent.readObject(LoggingEvent.java:848)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\n\tat java.lang.reflect.Method.invoke(Unknown Source)\n\tat java.io.ObjectStreamClass.invokeReadObject(Unknown Source)\n\tat java.io.ObjectInputStream.readSerialData(Unknown Source)\n\tat java.io.ObjectInputStream.readOrdinaryObject(Unknown Source)\n\tat java.io.ObjectInputStream.readObject0(Unknown Source)\n\tat java.io.ObjectInputStream.readObject(Unknown Source)\n\tat org.apache.log4j.net.SocketNode.run(SocketNode.java:134)\n\tat java.lang.Thread.run(Unknown Source)\n\nProperties file:\n----------------\n# Set root logger level to DEBUG and its appenders to stdout and R.\nlog4j.rootLogger=debug, stdout, R, Socket\n\nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender\nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout\n\n# Pattern to output the caller's file name and line number.\nlog4j.appender.stdout.layout.ConversionPattern=%5p [%t] (%c\\:%L) - %m%n\n\nlog4j.appender.R=org.apache.log4j.RollingFileAppender\nlog4j.appender.R.File=c:/spl_log4j.log\nlog4j.appender.R.MaxFileSize=512KB\nlog4j.appender.R.MaxBackupIndex=1\nlog4j.appender.R.layout=org.apache.log4j.PatternLayout\nlog4j.appender.R.layout.ConversionPattern=%p %t %c - %m%n\n\nlog4j.appender.Socket=org.apache.log4j.net.SocketAppender\nlog4j.appender.Socket.RemoteHost=localhost\nlog4j.appender.Socket.Port=4445\n\nTest class for debugging:\n-------------------------\npublic class test {\n\n\tpublic static void main( String[] args ) {\n\t\torg.apache.log4j.Logger.getLogger(\"test class\").debug(\"Testing \nlogging\");\n\t}\n}\n\n(Class being compiled & run with just log4j in the classpath)\n(log4j.properties is being read correctly)\n\nOutput in file that is logged (works as expected)\n-----------------------------\nDEBUG main test class - Testing logging"},
{"comment_id": "63403", "bug_id": "31178", "who": "Christian Ashby", "text": "See below for error, log4j.properties entries, etc.\n\nClassNotFoundException is thrown in chainsaw when trying to use a default \nSocketAppender and SimpleListener.\n\nChainsaw v2.0alpha loaded via WebStart on JDK 1.4.2 IE 6 Windows XP SP2, log4j \nversion 1.2.8\n\nTried reinstall of jdk, jvm and chainsaw\n\nException thrown:\n-----------------\nLevel\nERROR\nLogger\norg.apache.log4j.net.SocketNode\nTime\n2004-09-11 11:09:18,046\nThread\nThread-10\nMessage\nUnexpected exception. Closing connection.\nNDC\nnull\nClass\n\nMethod\n\nLine\n\nFile\n\nProperties\n{{log4jid,1}}\nThrowable\njava.lang.ClassNotFoundException: org.apache.log4j.spi.LocationInfo\n\tat com.sun.jnlp.JNLPClassLoader$1.run(Unknown Source)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat com.sun.jnlp.JNLPClassLoader.findClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClassInternal(Unknown Source)\n\tat java.lang.Class.forName0(Native Method)\n\tat java.lang.Class.forName(Unknown Source)\n\tat java.io.ObjectInputStream.resolveClass(Unknown Source)\n\tat java.io.ObjectInputStream.readNonProxyDesc(Unknown Source)\n\tat java.io.ObjectInputStream.readClassDesc(Unknown Source)\n\tat java.io.ObjectInputStream.readOrdinaryObject(Unknown Source)\n\tat java.io.ObjectInputStream.readObject0(Unknown Source)\n\tat java.io.ObjectInputStream.defaultReadFields(Unknown Source)\n\tat java.io.ObjectInputStream.defaultReadObject(Unknown Source)\n\tat org.apache.log4j.spi.LoggingEvent.readObject(LoggingEvent.java:848)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\n\tat java.lang.reflect.Method.invoke(Unknown Source)\n\tat java.io.ObjectStreamClass.invokeReadObject(Unknown Source)\n\tat java.io.ObjectInputStream.readSerialData(Unknown Source)\n\tat java.io.ObjectInputStream.readOrdinaryObject(Unknown Source)\n\tat java.io.ObjectInputStream.readObject0(Unknown Source)\n\tat java.io.ObjectInputStream.readObject(Unknown Source)\n\tat org.apache.log4j.net.SocketNode.run(SocketNode.java:134)\n\tat java.lang.Thread.run(Unknown Source)\n\nProperties file:\n----------------\n# Set root logger level to DEBUG and its appenders to stdout and R.\nlog4j.rootLogger=debug, stdout, R, Socket\n\nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender\nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout\n\n# Pattern to output the caller's file name and line number.\nlog4j.appender.stdout.layout.ConversionPattern=%5p [%t] (%c\\:%L) - %m%n\n\nlog4j.appender.R=org.apache.log4j.RollingFileAppender\nlog4j.appender.R.File=c:/spl_log4j.log\nlog4j.appender.R.MaxFileSize=512KB\nlog4j.appender.R.MaxBackupIndex=1\nlog4j.appender.R.layout=org.apache.log4j.PatternLayout\nlog4j.appender.R.layout.ConversionPattern=%p %t %c - %m%n\n\nlog4j.appender.Socket=org.apache.log4j.net.SocketAppender\nlog4j.appender.Socket.RemoteHost=localhost\nlog4j.appender.Socket.Port=4445\n\nTest class for debugging:\n-------------------------\npublic class test {\n\n\tpublic static void main( String[] args ) {\n\t\torg.apache.log4j.Logger.getLogger(\"test class\").debug(\"Testing \nlogging\");\n\t}\n}\n\n(Class being compiled & run with just log4j in the classpath)\n(log4j.properties is being read correctly)\n\nOutput in file that is logged (works as expected)\n-----------------------------\nDEBUG main test class - Testing logging"},
{"comment_id": "63403", "bug_id": "31178", "who": "Christian Ashby", "text": "See below for error, log4j.properties entries, etc.\n\nClassNotFoundException is thrown in chainsaw when trying to use a default \nSocketAppender and SimpleListener.\n\nChainsaw v2.0alpha loaded via WebStart on JDK 1.4.2 IE 6 Windows XP SP2, log4j \nversion 1.2.8\n\nTried reinstall of jdk, jvm and chainsaw\n\nException thrown:\n-----------------\nLevel\nERROR\nLogger\norg.apache.log4j.net.SocketNode\nTime\n2004-09-11 11:09:18,046\nThread\nThread-10\nMessage\nUnexpected exception. Closing connection.\nNDC\nnull\nClass\n\nMethod\n\nLine\n\nFile\n\nProperties\n{{log4jid,1}}\nThrowable\njava.lang.ClassNotFoundException: org.apache.log4j.spi.LocationInfo\n\tat com.sun.jnlp.JNLPClassLoader$1.run(Unknown Source)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat com.sun.jnlp.JNLPClassLoader.findClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClassInternal(Unknown Source)\n\tat java.lang.Class.forName0(Native Method)\n\tat java.lang.Class.forName(Unknown Source)\n\tat java.io.ObjectInputStream.resolveClass(Unknown Source)\n\tat java.io.ObjectInputStream.readNonProxyDesc(Unknown Source)\n\tat java.io.ObjectInputStream.readClassDesc(Unknown Source)\n\tat java.io.ObjectInputStream.readOrdinaryObject(Unknown Source)\n\tat java.io.ObjectInputStream.readObject0(Unknown Source)\n\tat java.io.ObjectInputStream.defaultReadFields(Unknown Source)\n\tat java.io.ObjectInputStream.defaultReadObject(Unknown Source)\n\tat org.apache.log4j.spi.LoggingEvent.readObject(LoggingEvent.java:848)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\n\tat java.lang.reflect.Method.invoke(Unknown Source)\n\tat java.io.ObjectStreamClass.invokeReadObject(Unknown Source)\n\tat java.io.ObjectInputStream.readSerialData(Unknown Source)\n\tat java.io.ObjectInputStream.readOrdinaryObject(Unknown Source)\n\tat java.io.ObjectInputStream.readObject0(Unknown Source)\n\tat java.io.ObjectInputStream.readObject(Unknown Source)\n\tat org.apache.log4j.net.SocketNode.run(SocketNode.java:134)\n\tat java.lang.Thread.run(Unknown Source)\n\nProperties file:\n----------------\n# Set root logger level to DEBUG and its appenders to stdout and R.\nlog4j.rootLogger=debug, stdout, R, Socket\n\nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender\nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout\n\n# Pattern to output the caller's file name and line number.\nlog4j.appender.stdout.layout.ConversionPattern=%5p [%t] (%c\\:%L) - %m%n\n\nlog4j.appender.R=org.apache.log4j.RollingFileAppender\nlog4j.appender.R.File=c:/spl_log4j.log\nlog4j.appender.R.MaxFileSize=512KB\nlog4j.appender.R.MaxBackupIndex=1\nlog4j.appender.R.layout=org.apache.log4j.PatternLayout\nlog4j.appender.R.layout.ConversionPattern=%p %t %c - %m%n\n\nlog4j.appender.Socket=org.apache.log4j.net.SocketAppender\nlog4j.appender.Socket.RemoteHost=localhost\nlog4j.appender.Socket.Port=4445\n\nTest class for debugging:\n-------------------------\npublic class test {\n\n\tpublic static void main( String[] args ) {\n\t\torg.apache.log4j.Logger.getLogger(\"test class\").debug(\"Testing \nlogging\");\n\t}\n}\n\n(Class being compiled & run with just log4j in the classpath)\n(log4j.properties is being read correctly)\n\nOutput in file that is logged (works as expected)\n-----------------------------\nDEBUG main test class - Testing logging"},
{"comment_id": "63403", "bug_id": "31178", "who": "Christian Ashby", "text": "See below for error, log4j.properties entries, etc.\n\nClassNotFoundException is thrown in chainsaw when trying to use a default \nSocketAppender and SimpleListener.\n\nChainsaw v2.0alpha loaded via WebStart on JDK 1.4.2 IE 6 Windows XP SP2, log4j \nversion 1.2.8\n\nTried reinstall of jdk, jvm and chainsaw\n\nException thrown:\n-----------------\nLevel\nERROR\nLogger\norg.apache.log4j.net.SocketNode\nTime\n2004-09-11 11:09:18,046\nThread\nThread-10\nMessage\nUnexpected exception. Closing connection.\nNDC\nnull\nClass\n\nMethod\n\nLine\n\nFile\n\nProperties\n{{log4jid,1}}\nThrowable\njava.lang.ClassNotFoundException: org.apache.log4j.spi.LocationInfo\n\tat com.sun.jnlp.JNLPClassLoader$1.run(Unknown Source)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat com.sun.jnlp.JNLPClassLoader.findClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClassInternal(Unknown Source)\n\tat java.lang.Class.forName0(Native Method)\n\tat java.lang.Class.forName(Unknown Source)\n\tat java.io.ObjectInputStream.resolveClass(Unknown Source)\n\tat java.io.ObjectInputStream.readNonProxyDesc(Unknown Source)\n\tat java.io.ObjectInputStream.readClassDesc(Unknown Source)\n\tat java.io.ObjectInputStream.readOrdinaryObject(Unknown Source)\n\tat java.io.ObjectInputStream.readObject0(Unknown Source)\n\tat java.io.ObjectInputStream.defaultReadFields(Unknown Source)\n\tat java.io.ObjectInputStream.defaultReadObject(Unknown Source)\n\tat org.apache.log4j.spi.LoggingEvent.readObject(LoggingEvent.java:848)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\n\tat java.lang.reflect.Method.invoke(Unknown Source)\n\tat java.io.ObjectStreamClass.invokeReadObject(Unknown Source)\n\tat java.io.ObjectInputStream.readSerialData(Unknown Source)\n\tat java.io.ObjectInputStream.readOrdinaryObject(Unknown Source)\n\tat java.io.ObjectInputStream.readObject0(Unknown Source)\n\tat java.io.ObjectInputStream.readObject(Unknown Source)\n\tat org.apache.log4j.net.SocketNode.run(SocketNode.java:134)\n\tat java.lang.Thread.run(Unknown Source)\n\nProperties file:\n----------------\n# Set root logger level to DEBUG and its appenders to stdout and R.\nlog4j.rootLogger=debug, stdout, R, Socket\n\nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender\nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout\n\n# Pattern to output the caller's file name and line number.\nlog4j.appender.stdout.layout.ConversionPattern=%5p [%t] (%c\\:%L) - %m%n\n\nlog4j.appender.R=org.apache.log4j.RollingFileAppender\nlog4j.appender.R.File=c:/spl_log4j.log\nlog4j.appender.R.MaxFileSize=512KB\nlog4j.appender.R.MaxBackupIndex=1\nlog4j.appender.R.layout=org.apache.log4j.PatternLayout\nlog4j.appender.R.layout.ConversionPattern=%p %t %c - %m%n\n\nlog4j.appender.Socket=org.apache.log4j.net.SocketAppender\nlog4j.appender.Socket.RemoteHost=localhost\nlog4j.appender.Socket.Port=4445\n\nTest class for debugging:\n-------------------------\npublic class test {\n\n\tpublic static void main( String[] args ) {\n\t\torg.apache.log4j.Logger.getLogger(\"test class\").debug(\"Testing \nlogging\");\n\t}\n}\n\n(Class being compiled & run with just log4j in the classpath)\n(log4j.properties is being read correctly)\n\nOutput in file that is logged (works as expected)\n-----------------------------\nDEBUG main test class - Testing logging"},
{"comment_id": "63403", "bug_id": "31178", "who": "Christian Ashby", "text": "See below for error, log4j.properties entries, etc.\n\nClassNotFoundException is thrown in chainsaw when trying to use a default \nSocketAppender and SimpleListener.\n\nChainsaw v2.0alpha loaded via WebStart on JDK 1.4.2 IE 6 Windows XP SP2, log4j \nversion 1.2.8\n\nTried reinstall of jdk, jvm and chainsaw\n\nException thrown:\n-----------------\nLevel\nERROR\nLogger\norg.apache.log4j.net.SocketNode\nTime\n2004-09-11 11:09:18,046\nThread\nThread-10\nMessage\nUnexpected exception. Closing connection.\nNDC\nnull\nClass\n\nMethod\n\nLine\n\nFile\n\nProperties\n{{log4jid,1}}\nThrowable\njava.lang.ClassNotFoundException: org.apache.log4j.spi.LocationInfo\n\tat com.sun.jnlp.JNLPClassLoader$1.run(Unknown Source)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat com.sun.jnlp.JNLPClassLoader.findClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClassInternal(Unknown Source)\n\tat java.lang.Class.forName0(Native Method)\n\tat java.lang.Class.forName(Unknown Source)\n\tat java.io.ObjectInputStream.resolveClass(Unknown Source)\n\tat java.io.ObjectInputStream.readNonProxyDesc(Unknown Source)\n\tat java.io.ObjectInputStream.readClassDesc(Unknown Source)\n\tat java.io.ObjectInputStream.readOrdinaryObject(Unknown Source)\n\tat java.io.ObjectInputStream.readObject0(Unknown Source)\n\tat java.io.ObjectInputStream.defaultReadFields(Unknown Source)\n\tat java.io.ObjectInputStream.defaultReadObject(Unknown Source)\n\tat org.apache.log4j.spi.LoggingEvent.readObject(LoggingEvent.java:848)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\n\tat java.lang.reflect.Method.invoke(Unknown Source)\n\tat java.io.ObjectStreamClass.invokeReadObject(Unknown Source)\n\tat java.io.ObjectInputStream.readSerialData(Unknown Source)\n\tat java.io.ObjectInputStream.readOrdinaryObject(Unknown Source)\n\tat java.io.ObjectInputStream.readObject0(Unknown Source)\n\tat java.io.ObjectInputStream.readObject(Unknown Source)\n\tat org.apache.log4j.net.SocketNode.run(SocketNode.java:134)\n\tat java.lang.Thread.run(Unknown Source)\n\nProperties file:\n----------------\n# Set root logger level to DEBUG and its appenders to stdout and R.\nlog4j.rootLogger=debug, stdout, R, Socket\n\nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender\nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout\n\n# Pattern to output the caller's file name and line number.\nlog4j.appender.stdout.layout.ConversionPattern=%5p [%t] (%c\\:%L) - %m%n\n\nlog4j.appender.R=org.apache.log4j.RollingFileAppender\nlog4j.appender.R.File=c:/spl_log4j.log\nlog4j.appender.R.MaxFileSize=512KB\nlog4j.appender.R.MaxBackupIndex=1\nlog4j.appender.R.layout=org.apache.log4j.PatternLayout\nlog4j.appender.R.layout.ConversionPattern=%p %t %c - %m%n\n\nlog4j.appender.Socket=org.apache.log4j.net.SocketAppender\nlog4j.appender.Socket.RemoteHost=localhost\nlog4j.appender.Socket.Port=4445\n\nTest class for debugging:\n-------------------------\npublic class test {\n\n\tpublic static void main( String[] args ) {\n\t\torg.apache.log4j.Logger.getLogger(\"test class\").debug(\"Testing \nlogging\");\n\t}\n}\n\n(Class being compiled & run with just log4j in the classpath)\n(log4j.properties is being read correctly)\n\nOutput in file that is logged (works as expected)\n-----------------------------\nDEBUG main test class - Testing logging"},
{"comment_id": "63403", "bug_id": "31178", "who": "Christian Ashby", "text": "See below for error, log4j.properties entries, etc.\n\nClassNotFoundException is thrown in chainsaw when trying to use a default \nSocketAppender and SimpleListener.\n\nChainsaw v2.0alpha loaded via WebStart on JDK 1.4.2 IE 6 Windows XP SP2, log4j \nversion 1.2.8\n\nTried reinstall of jdk, jvm and chainsaw\n\nException thrown:\n-----------------\nLevel\nERROR\nLogger\norg.apache.log4j.net.SocketNode\nTime\n2004-09-11 11:09:18,046\nThread\nThread-10\nMessage\nUnexpected exception. Closing connection.\nNDC\nnull\nClass\n\nMethod\n\nLine\n\nFile\n\nProperties\n{{log4jid,1}}\nThrowable\njava.lang.ClassNotFoundException: org.apache.log4j.spi.LocationInfo\n\tat com.sun.jnlp.JNLPClassLoader$1.run(Unknown Source)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat com.sun.jnlp.JNLPClassLoader.findClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClassInternal(Unknown Source)\n\tat java.lang.Class.forName0(Native Method)\n\tat java.lang.Class.forName(Unknown Source)\n\tat java.io.ObjectInputStream.resolveClass(Unknown Source)\n\tat java.io.ObjectInputStream.readNonProxyDesc(Unknown Source)\n\tat java.io.ObjectInputStream.readClassDesc(Unknown Source)\n\tat java.io.ObjectInputStream.readOrdinaryObject(Unknown Source)\n\tat java.io.ObjectInputStream.readObject0(Unknown Source)\n\tat java.io.ObjectInputStream.defaultReadFields(Unknown Source)\n\tat java.io.ObjectInputStream.defaultReadObject(Unknown Source)\n\tat org.apache.log4j.spi.LoggingEvent.readObject(LoggingEvent.java:848)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\n\tat java.lang.reflect.Method.invoke(Unknown Source)\n\tat java.io.ObjectStreamClass.invokeReadObject(Unknown Source)\n\tat java.io.ObjectInputStream.readSerialData(Unknown Source)\n\tat java.io.ObjectInputStream.readOrdinaryObject(Unknown Source)\n\tat java.io.ObjectInputStream.readObject0(Unknown Source)\n\tat java.io.ObjectInputStream.readObject(Unknown Source)\n\tat org.apache.log4j.net.SocketNode.run(SocketNode.java:134)\n\tat java.lang.Thread.run(Unknown Source)\n\nProperties file:\n----------------\n# Set root logger level to DEBUG and its appenders to stdout and R.\nlog4j.rootLogger=debug, stdout, R, Socket\n\nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender\nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout\n\n# Pattern to output the caller's file name and line number.\nlog4j.appender.stdout.layout.ConversionPattern=%5p [%t] (%c\\:%L) - %m%n\n\nlog4j.appender.R=org.apache.log4j.RollingFileAppender\nlog4j.appender.R.File=c:/spl_log4j.log\nlog4j.appender.R.MaxFileSize=512KB\nlog4j.appender.R.MaxBackupIndex=1\nlog4j.appender.R.layout=org.apache.log4j.PatternLayout\nlog4j.appender.R.layout.ConversionPattern=%p %t %c - %m%n\n\nlog4j.appender.Socket=org.apache.log4j.net.SocketAppender\nlog4j.appender.Socket.RemoteHost=localhost\nlog4j.appender.Socket.Port=4445\n\nTest class for debugging:\n-------------------------\npublic class test {\n\n\tpublic static void main( String[] args ) {\n\t\torg.apache.log4j.Logger.getLogger(\"test class\").debug(\"Testing \nlogging\");\n\t}\n}\n\n(Class being compiled & run with just log4j in the classpath)\n(log4j.properties is being read correctly)\n\nOutput in file that is logged (works as expected)\n-----------------------------\nDEBUG main test class - Testing logging"},
{"comment_id": "63403", "bug_id": "31178", "who": "Christian Ashby", "text": "See below for error, log4j.properties entries, etc.\n\nClassNotFoundException is thrown in chainsaw when trying to use a default \nSocketAppender and SimpleListener.\n\nChainsaw v2.0alpha loaded via WebStart on JDK 1.4.2 IE 6 Windows XP SP2, log4j \nversion 1.2.8\n\nTried reinstall of jdk, jvm and chainsaw\n\nException thrown:\n-----------------\nLevel\nERROR\nLogger\norg.apache.log4j.net.SocketNode\nTime\n2004-09-11 11:09:18,046\nThread\nThread-10\nMessage\nUnexpected exception. Closing connection.\nNDC\nnull\nClass\n\nMethod\n\nLine\n\nFile\n\nProperties\n{{log4jid,1}}\nThrowable\njava.lang.ClassNotFoundException: org.apache.log4j.spi.LocationInfo\n\tat com.sun.jnlp.JNLPClassLoader$1.run(Unknown Source)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat com.sun.jnlp.JNLPClassLoader.findClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClassInternal(Unknown Source)\n\tat java.lang.Class.forName0(Native Method)\n\tat java.lang.Class.forName(Unknown Source)\n\tat java.io.ObjectInputStream.resolveClass(Unknown Source)\n\tat java.io.ObjectInputStream.readNonProxyDesc(Unknown Source)\n\tat java.io.ObjectInputStream.readClassDesc(Unknown Source)\n\tat java.io.ObjectInputStream.readOrdinaryObject(Unknown Source)\n\tat java.io.ObjectInputStream.readObject0(Unknown Source)\n\tat java.io.ObjectInputStream.defaultReadFields(Unknown Source)\n\tat java.io.ObjectInputStream.defaultReadObject(Unknown Source)\n\tat org.apache.log4j.spi.LoggingEvent.readObject(LoggingEvent.java:848)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\n\tat java.lang.reflect.Method.invoke(Unknown Source)\n\tat java.io.ObjectStreamClass.invokeReadObject(Unknown Source)\n\tat java.io.ObjectInputStream.readSerialData(Unknown Source)\n\tat java.io.ObjectInputStream.readOrdinaryObject(Unknown Source)\n\tat java.io.ObjectInputStream.readObject0(Unknown Source)\n\tat java.io.ObjectInputStream.readObject(Unknown Source)\n\tat org.apache.log4j.net.SocketNode.run(SocketNode.java:134)\n\tat java.lang.Thread.run(Unknown Source)\n\nProperties file:\n----------------\n# Set root logger level to DEBUG and its appenders to stdout and R.\nlog4j.rootLogger=debug, stdout, R, Socket\n\nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender\nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout\n\n# Pattern to output the caller's file name and line number.\nlog4j.appender.stdout.layout.ConversionPattern=%5p [%t] (%c\\:%L) - %m%n\n\nlog4j.appender.R=org.apache.log4j.RollingFileAppender\nlog4j.appender.R.File=c:/spl_log4j.log\nlog4j.appender.R.MaxFileSize=512KB\nlog4j.appender.R.MaxBackupIndex=1\nlog4j.appender.R.layout=org.apache.log4j.PatternLayout\nlog4j.appender.R.layout.ConversionPattern=%p %t %c - %m%n\n\nlog4j.appender.Socket=org.apache.log4j.net.SocketAppender\nlog4j.appender.Socket.RemoteHost=localhost\nlog4j.appender.Socket.Port=4445\n\nTest class for debugging:\n-------------------------\npublic class test {\n\n\tpublic static void main( String[] args ) {\n\t\torg.apache.log4j.Logger.getLogger(\"test class\").debug(\"Testing \nlogging\");\n\t}\n}\n\n(Class being compiled & run with just log4j in the classpath)\n(log4j.properties is being read correctly)\n\nOutput in file that is logged (works as expected)\n-----------------------------\nDEBUG main test class - Testing logging"},
{"comment_id": "63403", "bug_id": "31178", "who": "Christian Ashby", "text": "See below for error, log4j.properties entries, etc.\n\nClassNotFoundException is thrown in chainsaw when trying to use a default \nSocketAppender and SimpleListener.\n\nChainsaw v2.0alpha loaded via WebStart on JDK 1.4.2 IE 6 Windows XP SP2, log4j \nversion 1.2.8\n\nTried reinstall of jdk, jvm and chainsaw\n\nException thrown:\n-----------------\nLevel\nERROR\nLogger\norg.apache.log4j.net.SocketNode\nTime\n2004-09-11 11:09:18,046\nThread\nThread-10\nMessage\nUnexpected exception. Closing connection.\nNDC\nnull\nClass\n\nMethod\n\nLine\n\nFile\n\nProperties\n{{log4jid,1}}\nThrowable\njava.lang.ClassNotFoundException: org.apache.log4j.spi.LocationInfo\n\tat com.sun.jnlp.JNLPClassLoader$1.run(Unknown Source)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat com.sun.jnlp.JNLPClassLoader.findClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClassInternal(Unknown Source)\n\tat java.lang.Class.forName0(Native Method)\n\tat java.lang.Class.forName(Unknown Source)\n\tat java.io.ObjectInputStream.resolveClass(Unknown Source)\n\tat java.io.ObjectInputStream.readNonProxyDesc(Unknown Source)\n\tat java.io.ObjectInputStream.readClassDesc(Unknown Source)\n\tat java.io.ObjectInputStream.readOrdinaryObject(Unknown Source)\n\tat java.io.ObjectInputStream.readObject0(Unknown Source)\n\tat java.io.ObjectInputStream.defaultReadFields(Unknown Source)\n\tat java.io.ObjectInputStream.defaultReadObject(Unknown Source)\n\tat org.apache.log4j.spi.LoggingEvent.readObject(LoggingEvent.java:848)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\n\tat java.lang.reflect.Method.invoke(Unknown Source)\n\tat java.io.ObjectStreamClass.invokeReadObject(Unknown Source)\n\tat java.io.ObjectInputStream.readSerialData(Unknown Source)\n\tat java.io.ObjectInputStream.readOrdinaryObject(Unknown Source)\n\tat java.io.ObjectInputStream.readObject0(Unknown Source)\n\tat java.io.ObjectInputStream.readObject(Unknown Source)\n\tat org.apache.log4j.net.SocketNode.run(SocketNode.java:134)\n\tat java.lang.Thread.run(Unknown Source)\n\nProperties file:\n----------------\n# Set root logger level to DEBUG and its appenders to stdout and R.\nlog4j.rootLogger=debug, stdout, R, Socket\n\nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender\nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout\n\n# Pattern to output the caller's file name and line number.\nlog4j.appender.stdout.layout.ConversionPattern=%5p [%t] (%c\\:%L) - %m%n\n\nlog4j.appender.R=org.apache.log4j.RollingFileAppender\nlog4j.appender.R.File=c:/spl_log4j.log\nlog4j.appender.R.MaxFileSize=512KB\nlog4j.appender.R.MaxBackupIndex=1\nlog4j.appender.R.layout=org.apache.log4j.PatternLayout\nlog4j.appender.R.layout.ConversionPattern=%p %t %c - %m%n\n\nlog4j.appender.Socket=org.apache.log4j.net.SocketAppender\nlog4j.appender.Socket.RemoteHost=localhost\nlog4j.appender.Socket.Port=4445\n\nTest class for debugging:\n-------------------------\npublic class test {\n\n\tpublic static void main( String[] args ) {\n\t\torg.apache.log4j.Logger.getLogger(\"test class\").debug(\"Testing \nlogging\");\n\t}\n}\n\n(Class being compiled & run with just log4j in the classpath)\n(log4j.properties is being read correctly)\n\nOutput in file that is logged (works as expected)\n-----------------------------\nDEBUG main test class - Testing logging"},
{"comment_id": "63403", "bug_id": "31178", "who": "Christian Ashby", "text": "See below for error, log4j.properties entries, etc.\n\nClassNotFoundException is thrown in chainsaw when trying to use a default \nSocketAppender and SimpleListener.\n\nChainsaw v2.0alpha loaded via WebStart on JDK 1.4.2 IE 6 Windows XP SP2, log4j \nversion 1.2.8\n\nTried reinstall of jdk, jvm and chainsaw\n\nException thrown:\n-----------------\nLevel\nERROR\nLogger\norg.apache.log4j.net.SocketNode\nTime\n2004-09-11 11:09:18,046\nThread\nThread-10\nMessage\nUnexpected exception. Closing connection.\nNDC\nnull\nClass\n\nMethod\n\nLine\n\nFile\n\nProperties\n{{log4jid,1}}\nThrowable\njava.lang.ClassNotFoundException: org.apache.log4j.spi.LocationInfo\n\tat com.sun.jnlp.JNLPClassLoader$1.run(Unknown Source)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat com.sun.jnlp.JNLPClassLoader.findClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClassInternal(Unknown Source)\n\tat java.lang.Class.forName0(Native Method)\n\tat java.lang.Class.forName(Unknown Source)\n\tat java.io.ObjectInputStream.resolveClass(Unknown Source)\n\tat java.io.ObjectInputStream.readNonProxyDesc(Unknown Source)\n\tat java.io.ObjectInputStream.readClassDesc(Unknown Source)\n\tat java.io.ObjectInputStream.readOrdinaryObject(Unknown Source)\n\tat java.io.ObjectInputStream.readObject0(Unknown Source)\n\tat java.io.ObjectInputStream.defaultReadFields(Unknown Source)\n\tat java.io.ObjectInputStream.defaultReadObject(Unknown Source)\n\tat org.apache.log4j.spi.LoggingEvent.readObject(LoggingEvent.java:848)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\n\tat java.lang.reflect.Method.invoke(Unknown Source)\n\tat java.io.ObjectStreamClass.invokeReadObject(Unknown Source)\n\tat java.io.ObjectInputStream.readSerialData(Unknown Source)\n\tat java.io.ObjectInputStream.readOrdinaryObject(Unknown Source)\n\tat java.io.ObjectInputStream.readObject0(Unknown Source)\n\tat java.io.ObjectInputStream.readObject(Unknown Source)\n\tat org.apache.log4j.net.SocketNode.run(SocketNode.java:134)\n\tat java.lang.Thread.run(Unknown Source)\n\nProperties file:\n----------------\n# Set root logger level to DEBUG and its appenders to stdout and R.\nlog4j.rootLogger=debug, stdout, R, Socket\n\nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender\nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout\n\n# Pattern to output the caller's file name and line number.\nlog4j.appender.stdout.layout.ConversionPattern=%5p [%t] (%c\\:%L) - %m%n\n\nlog4j.appender.R=org.apache.log4j.RollingFileAppender\nlog4j.appender.R.File=c:/spl_log4j.log\nlog4j.appender.R.MaxFileSize=512KB\nlog4j.appender.R.MaxBackupIndex=1\nlog4j.appender.R.layout=org.apache.log4j.PatternLayout\nlog4j.appender.R.layout.ConversionPattern=%p %t %c - %m%n\n\nlog4j.appender.Socket=org.apache.log4j.net.SocketAppender\nlog4j.appender.Socket.RemoteHost=localhost\nlog4j.appender.Socket.Port=4445\n\nTest class for debugging:\n-------------------------\npublic class test {\n\n\tpublic static void main( String[] args ) {\n\t\torg.apache.log4j.Logger.getLogger(\"test class\").debug(\"Testing \nlogging\");\n\t}\n}\n\n(Class being compiled & run with just log4j in the classpath)\n(log4j.properties is being read correctly)\n\nOutput in file that is logged (works as expected)\n-----------------------------\nDEBUG main test class - Testing logging"},
{"comment_id": "63403", "bug_id": "31178", "who": "Christian Ashby", "text": "See below for error, log4j.properties entries, etc.\n\nClassNotFoundException is thrown in chainsaw when trying to use a default \nSocketAppender and SimpleListener.\n\nChainsaw v2.0alpha loaded via WebStart on JDK 1.4.2 IE 6 Windows XP SP2, log4j \nversion 1.2.8\n\nTried reinstall of jdk, jvm and chainsaw\n\nException thrown:\n-----------------\nLevel\nERROR\nLogger\norg.apache.log4j.net.SocketNode\nTime\n2004-09-11 11:09:18,046\nThread\nThread-10\nMessage\nUnexpected exception. Closing connection.\nNDC\nnull\nClass\n\nMethod\n\nLine\n\nFile\n\nProperties\n{{log4jid,1}}\nThrowable\njava.lang.ClassNotFoundException: org.apache.log4j.spi.LocationInfo\n\tat com.sun.jnlp.JNLPClassLoader$1.run(Unknown Source)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat com.sun.jnlp.JNLPClassLoader.findClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClassInternal(Unknown Source)\n\tat java.lang.Class.forName0(Native Method)\n\tat java.lang.Class.forName(Unknown Source)\n\tat java.io.ObjectInputStream.resolveClass(Unknown Source)\n\tat java.io.ObjectInputStream.readNonProxyDesc(Unknown Source)\n\tat java.io.ObjectInputStream.readClassDesc(Unknown Source)\n\tat java.io.ObjectInputStream.readOrdinaryObject(Unknown Source)\n\tat java.io.ObjectInputStream.readObject0(Unknown Source)\n\tat java.io.ObjectInputStream.defaultReadFields(Unknown Source)\n\tat java.io.ObjectInputStream.defaultReadObject(Unknown Source)\n\tat org.apache.log4j.spi.LoggingEvent.readObject(LoggingEvent.java:848)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\n\tat java.lang.reflect.Method.invoke(Unknown Source)\n\tat java.io.ObjectStreamClass.invokeReadObject(Unknown Source)\n\tat java.io.ObjectInputStream.readSerialData(Unknown Source)\n\tat java.io.ObjectInputStream.readOrdinaryObject(Unknown Source)\n\tat java.io.ObjectInputStream.readObject0(Unknown Source)\n\tat java.io.ObjectInputStream.readObject(Unknown Source)\n\tat org.apache.log4j.net.SocketNode.run(SocketNode.java:134)\n\tat java.lang.Thread.run(Unknown Source)\n\nProperties file:\n----------------\n# Set root logger level to DEBUG and its appenders to stdout and R.\nlog4j.rootLogger=debug, stdout, R, Socket\n\nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender\nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout\n\n# Pattern to output the caller's file name and line number.\nlog4j.appender.stdout.layout.ConversionPattern=%5p [%t] (%c\\:%L) - %m%n\n\nlog4j.appender.R=org.apache.log4j.RollingFileAppender\nlog4j.appender.R.File=c:/spl_log4j.log\nlog4j.appender.R.MaxFileSize=512KB\nlog4j.appender.R.MaxBackupIndex=1\nlog4j.appender.R.layout=org.apache.log4j.PatternLayout\nlog4j.appender.R.layout.ConversionPattern=%p %t %c - %m%n\n\nlog4j.appender.Socket=org.apache.log4j.net.SocketAppender\nlog4j.appender.Socket.RemoteHost=localhost\nlog4j.appender.Socket.Port=4445\n\nTest class for debugging:\n-------------------------\npublic class test {\n\n\tpublic static void main( String[] args ) {\n\t\torg.apache.log4j.Logger.getLogger(\"test class\").debug(\"Testing \nlogging\");\n\t}\n}\n\n(Class being compiled & run with just log4j in the classpath)\n(log4j.properties is being read correctly)\n\nOutput in file that is logged (works as expected)\n-----------------------------\nDEBUG main test class - Testing logging"},
{"comment_id": "63403", "bug_id": "31178", "who": "Christian Ashby", "text": "See below for error, log4j.properties entries, etc.\n\nClassNotFoundException is thrown in chainsaw when trying to use a default \nSocketAppender and SimpleListener.\n\nChainsaw v2.0alpha loaded via WebStart on JDK 1.4.2 IE 6 Windows XP SP2, log4j \nversion 1.2.8\n\nTried reinstall of jdk, jvm and chainsaw\n\nException thrown:\n-----------------\nLevel\nERROR\nLogger\norg.apache.log4j.net.SocketNode\nTime\n2004-09-11 11:09:18,046\nThread\nThread-10\nMessage\nUnexpected exception. Closing connection.\nNDC\nnull\nClass\n\nMethod\n\nLine\n\nFile\n\nProperties\n{{log4jid,1}}\nThrowable\njava.lang.ClassNotFoundException: org.apache.log4j.spi.LocationInfo\n\tat com.sun.jnlp.JNLPClassLoader$1.run(Unknown Source)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat com.sun.jnlp.JNLPClassLoader.findClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClassInternal(Unknown Source)\n\tat java.lang.Class.forName0(Native Method)\n\tat java.lang.Class.forName(Unknown Source)\n\tat java.io.ObjectInputStream.resolveClass(Unknown Source)\n\tat java.io.ObjectInputStream.readNonProxyDesc(Unknown Source)\n\tat java.io.ObjectInputStream.readClassDesc(Unknown Source)\n\tat java.io.ObjectInputStream.readOrdinaryObject(Unknown Source)\n\tat java.io.ObjectInputStream.readObject0(Unknown Source)\n\tat java.io.ObjectInputStream.defaultReadFields(Unknown Source)\n\tat java.io.ObjectInputStream.defaultReadObject(Unknown Source)\n\tat org.apache.log4j.spi.LoggingEvent.readObject(LoggingEvent.java:848)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\n\tat java.lang.reflect.Method.invoke(Unknown Source)\n\tat java.io.ObjectStreamClass.invokeReadObject(Unknown Source)\n\tat java.io.ObjectInputStream.readSerialData(Unknown Source)\n\tat java.io.ObjectInputStream.readOrdinaryObject(Unknown Source)\n\tat java.io.ObjectInputStream.readObject0(Unknown Source)\n\tat java.io.ObjectInputStream.readObject(Unknown Source)\n\tat org.apache.log4j.net.SocketNode.run(SocketNode.java:134)\n\tat java.lang.Thread.run(Unknown Source)\n\nProperties file:\n----------------\n# Set root logger level to DEBUG and its appenders to stdout and R.\nlog4j.rootLogger=debug, stdout, R, Socket\n\nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender\nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout\n\n# Pattern to output the caller's file name and line number.\nlog4j.appender.stdout.layout.ConversionPattern=%5p [%t] (%c\\:%L) - %m%n\n\nlog4j.appender.R=org.apache.log4j.RollingFileAppender\nlog4j.appender.R.File=c:/spl_log4j.log\nlog4j.appender.R.MaxFileSize=512KB\nlog4j.appender.R.MaxBackupIndex=1\nlog4j.appender.R.layout=org.apache.log4j.PatternLayout\nlog4j.appender.R.layout.ConversionPattern=%p %t %c - %m%n\n\nlog4j.appender.Socket=org.apache.log4j.net.SocketAppender\nlog4j.appender.Socket.RemoteHost=localhost\nlog4j.appender.Socket.Port=4445\n\nTest class for debugging:\n-------------------------\npublic class test {\n\n\tpublic static void main( String[] args ) {\n\t\torg.apache.log4j.Logger.getLogger(\"test class\").debug(\"Testing \nlogging\");\n\t}\n}\n\n(Class being compiled & run with just log4j in the classpath)\n(log4j.properties is being read correctly)\n\nOutput in file that is logged (works as expected)\n-----------------------------\nDEBUG main test class - Testing logging"},
{"comment_id": "63403", "bug_id": "31178", "who": "Christian Ashby", "text": "See below for error, log4j.properties entries, etc.\n\nClassNotFoundException is thrown in chainsaw when trying to use a default \nSocketAppender and SimpleListener.\n\nChainsaw v2.0alpha loaded via WebStart on JDK 1.4.2 IE 6 Windows XP SP2, log4j \nversion 1.2.8\n\nTried reinstall of jdk, jvm and chainsaw\n\nException thrown:\n-----------------\nLevel\nERROR\nLogger\norg.apache.log4j.net.SocketNode\nTime\n2004-09-11 11:09:18,046\nThread\nThread-10\nMessage\nUnexpected exception. Closing connection.\nNDC\nnull\nClass\n\nMethod\n\nLine\n\nFile\n\nProperties\n{{log4jid,1}}\nThrowable\njava.lang.ClassNotFoundException: org.apache.log4j.spi.LocationInfo\n\tat com.sun.jnlp.JNLPClassLoader$1.run(Unknown Source)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat com.sun.jnlp.JNLPClassLoader.findClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClass(Unknown Source)\n\tat java.lang.ClassLoader.loadClassInternal(Unknown Source)\n\tat java.lang.Class.forName0(Native Method)\n\tat java.lang.Class.forName(Unknown Source)\n\tat java.io.ObjectInputStream.resolveClass(Unknown Source)\n\tat java.io.ObjectInputStream.readNonProxyDesc(Unknown Source)\n\tat java.io.ObjectInputStream.readClassDesc(Unknown Source)\n\tat java.io.ObjectInputStream.readOrdinaryObject(Unknown Source)\n\tat java.io.ObjectInputStream.readObject0(Unknown Source)\n\tat java.io.ObjectInputStream.defaultReadFields(Unknown Source)\n\tat java.io.ObjectInputStream.defaultReadObject(Unknown Source)\n\tat org.apache.log4j.spi.LoggingEvent.readObject(LoggingEvent.java:848)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\n\tat java.lang.reflect.Method.invoke(Unknown Source)\n\tat java.io.ObjectStreamClass.invokeReadObject(Unknown Source)\n\tat java.io.ObjectInputStream.readSerialData(Unknown Source)\n\tat java.io.ObjectInputStream.readOrdinaryObject(Unknown Source)\n\tat java.io.ObjectInputStream.readObject0(Unknown Source)\n\tat java.io.ObjectInputStream.readObject(Unknown Source)\n\tat org.apache.log4j.net.SocketNode.run(SocketNode.java:134)\n\tat java.lang.Thread.run(Unknown Source)\n\nProperties file:\n----------------\n# Set root logger level to DEBUG and its appenders to stdout and R.\nlog4j.rootLogger=debug, stdout, R, Socket\n\nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender\nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout\n\n# Pattern to output the caller's file name and line number.\nlog4j.appender.stdout.layout.ConversionPattern=%5p [%t] (%c\\:%L) - %m%n\n\nlog4j.appender.R=org.apache.log4j.RollingFileAppender\nlog4j.appender.R.File=c:/spl_log4j.log\nlog4j.appender.R.MaxFileSize=512KB\nlog4j.appender.R.MaxBackupIndex=1\nlog4j.appender.R.layout=org.apache.log4j.PatternLayout\nlog4j.appender.R.layout.ConversionPattern=%p %t %c - %m%n\n\nlog4j.appender.Socket=org.apache.log4j.net.SocketAppender\nlog4j.appender.Socket.RemoteHost=localhost\nlog4j.appender.Socket.Port=4445\n\nTest class for debugging:\n-------------------------\npublic class test {\n\n\tpublic static void main( String[] args ) {\n\t\torg.apache.log4j.Logger.getLogger(\"test class\").debug(\"Testing \nlogging\");\n\t}\n}\n\n(Class being compiled & run with just log4j in the classpath)\n(log4j.properties is being read correctly)\n\nOutput in file that is logged (works as expected)\n-----------------------------\nDEBUG main test class - Testing logging"}
]